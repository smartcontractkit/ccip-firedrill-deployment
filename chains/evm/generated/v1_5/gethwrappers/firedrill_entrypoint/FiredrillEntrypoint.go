// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package firedrill_entrypoint

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// FiredrillCompoundOffRamp is an auto generated low-level Go binding around an user-defined struct.
type FiredrillCompoundOffRamp struct {
	SourceChainSelector uint64
	OffRamp             common.Address
}

// FiredrillCompoundTaggedRoot is an auto generated low-level Go binding around an user-defined struct.
type FiredrillCompoundTaggedRoot struct {
	CommitStore common.Address
	Root        [32]byte
}

// FiredrillCompoundTokenBucket is an auto generated low-level Go binding around an user-defined struct.
type FiredrillCompoundTokenBucket struct {
	Tokens      *big.Int
	LastUpdated uint32
	IsEnabled   bool
	Capacity    *big.Int
	Rate        *big.Int
}

// FiredrillEntrypointMetaData contains all meta data concerning the FiredrillEntrypoint contract.
var FiredrillEntrypointMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"constructor\",\"inputs\":[{\"name\":\"chainSelector\",\"type\":\"uint64\",\"internalType\":\"uint64\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"acceptOwnership\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"chainSelector\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint64\",\"internalType\":\"uint64\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"currentRateLimiterState\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"tuple\",\"internalType\":\"structFiredrillCompound.TokenBucket\",\"components\":[{\"name\":\"tokens\",\"type\":\"uint128\",\"internalType\":\"uint128\"},{\"name\":\"lastUpdated\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"isEnabled\",\"type\":\"bool\",\"internalType\":\"bool\"},{\"name\":\"capacity\",\"type\":\"uint128\",\"internalType\":\"uint128\"},{\"name\":\"rate\",\"type\":\"uint128\",\"internalType\":\"uint128\"}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"drill_InvalidMessageState\",\"inputs\":[{\"name\":\"from\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"to\",\"type\":\"uint8\",\"internalType\":\"uint8\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"drill_PendingBless\",\"inputs\":[{\"name\":\"from\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"to\",\"type\":\"uint8\",\"internalType\":\"uint8\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"drill_PendingCommit_PendingQueue_TxSpike\",\"inputs\":[{\"name\":\"from\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"to\",\"type\":\"uint8\",\"internalType\":\"uint8\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"drill_PendingExecution\",\"inputs\":[{\"name\":\"from\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"to\",\"type\":\"uint8\",\"internalType\":\"uint8\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"drill_PriceRegistries\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"drill_PrivilegedFunctionCalled\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"drill_RmnCurse\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"drill_RmnVotedToCurse\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"drill_TokenPoolRateLimit_Inbound\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"drill_TokenPoolRateLimit_Offramp\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"emitCursed\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"emitReleased\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"emitTagRootBlessed\",\"inputs\":[{\"name\":\"minSeqNr\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"maxSeqNr\",\"type\":\"uint64\",\"internalType\":\"uint64\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"emitUsdPerTokenUpdated\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"emitVotedToCurse\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"getARM\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getCurrentInboundRateLimiterState\",\"inputs\":[{\"name\":\"\",\"type\":\"uint64\",\"internalType\":\"uint64\"}],\"outputs\":[{\"name\":\"\",\"type\":\"tuple\",\"internalType\":\"structFiredrillCompound.TokenBucket\",\"components\":[{\"name\":\"tokens\",\"type\":\"uint128\",\"internalType\":\"uint128\"},{\"name\":\"lastUpdated\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"isEnabled\",\"type\":\"bool\",\"internalType\":\"bool\"},{\"name\":\"capacity\",\"type\":\"uint128\",\"internalType\":\"uint128\"},{\"name\":\"rate\",\"type\":\"uint128\",\"internalType\":\"uint128\"}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getCurrentOutboundRateLimiterState\",\"inputs\":[{\"name\":\"\",\"type\":\"uint64\",\"internalType\":\"uint64\"}],\"outputs\":[{\"name\":\"\",\"type\":\"tuple\",\"internalType\":\"structFiredrillCompound.TokenBucket\",\"components\":[{\"name\":\"tokens\",\"type\":\"uint128\",\"internalType\":\"uint128\"},{\"name\":\"lastUpdated\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"isEnabled\",\"type\":\"bool\",\"internalType\":\"bool\"},{\"name\":\"capacity\",\"type\":\"uint128\",\"internalType\":\"uint128\"},{\"name\":\"rate\",\"type\":\"uint128\",\"internalType\":\"uint128\"}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getOffRamps\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"tuple[]\",\"internalType\":\"structFiredrillCompound.OffRamp[]\",\"components\":[{\"name\":\"sourceChainSelector\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"offRamp\",\"type\":\"address\",\"internalType\":\"address\"}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getOnRamp\",\"inputs\":[{\"name\":\"\",\"type\":\"uint64\",\"internalType\":\"uint64\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getStalenessThreshold\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint128\",\"internalType\":\"uint128\"}],\"stateMutability\":\"pure\"},{\"type\":\"function\",\"name\":\"getToken\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"offRamp\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"onRamp\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"owner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"pendingOwner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"prepare_Register\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"receiver\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"renounceOwnership\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"token\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"transferOwnership\",\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"typeAndVersion\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"pure\"},{\"type\":\"event\",\"name\":\"Cursed\",\"inputs\":[{\"name\":\"configVersion\",\"type\":\"uint32\",\"indexed\":true,\"internalType\":\"uint32\"},{\"name\":\"subject\",\"type\":\"bytes16\",\"indexed\":false,\"internalType\":\"bytes16\"},{\"name\":\"blockTimestamp\",\"type\":\"uint64\",\"indexed\":false,\"internalType\":\"uint64\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OwnershipTransferStarted\",\"inputs\":[{\"name\":\"previousOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"newOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OwnershipTransferred\",\"inputs\":[{\"name\":\"previousOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"newOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Released\",\"inputs\":[{\"name\":\"sender\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"recipient\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"TaggedRootBlessed\",\"inputs\":[{\"name\":\"configVersion\",\"type\":\"uint32\",\"indexed\":true,\"internalType\":\"uint32\"},{\"name\":\"taggedRoot\",\"type\":\"tuple\",\"indexed\":false,\"internalType\":\"structFiredrillCompound.TaggedRoot\",\"components\":[{\"name\":\"commitStore\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"root\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}]},{\"name\":\"accumulatedWeight\",\"type\":\"uint16\",\"indexed\":false,\"internalType\":\"uint16\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"UsdPerTokenUpdated\",\"inputs\":[{\"name\":\"token\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"},{\"name\":\"timestamp\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"VotedToCurse\",\"inputs\":[{\"name\":\"configVersion\",\"type\":\"uint32\",\"indexed\":true,\"internalType\":\"uint32\"},{\"name\":\"voter\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"subject\",\"type\":\"bytes16\",\"indexed\":false,\"internalType\":\"bytes16\"},{\"name\":\"curseId\",\"type\":\"bytes16\",\"indexed\":false,\"internalType\":\"bytes16\"},{\"name\":\"weight\",\"type\":\"uint8\",\"indexed\":false,\"internalType\":\"uint8\"},{\"name\":\"blockTimestamp\",\"type\":\"uint64\",\"indexed\":false,\"internalType\":\"uint64\"},{\"name\":\"cursesHash\",\"type\":\"bytes28\",\"indexed\":false,\"internalType\":\"bytes28\"},{\"name\":\"accumulatedWeight\",\"type\":\"uint16\",\"indexed\":false,\"internalType\":\"uint16\"}],\"anonymous\":false},{\"type\":\"error\",\"name\":\"OwnableInvalidOwner\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"OwnableUnauthorizedAccount\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"}]}]",
	Bin: "0x61012060405234801562000011575f80fd5b5060405162004afc38038062004afc83398101604081905262000034916200021b565b8033806200005b57604051631e4fbdf760e01b81525f600482015260240160405180910390fd5b620000668162000176565b506001600160401b0381166080526040516200008290620001e3565b604051809103905ff0801580156200009c573d5f803e3d5ffd5b506001600160a01b031660a0526040513090620000b990620001f1565b6001600160a01b039091168152602001604051809103905ff080158015620000e3573d5f803e3d5ffd5b506001600160a01b031660c05260405130906200010090620001ff565b6001600160a01b039091168152602001604051809103905ff0801580156200012a573d5f803e3d5ffd5b506001600160a01b031660e05260405162000145906200020d565b604051809103905ff0801580156200015f573d5f803e3d5ffd5b506001600160a01b031661010052506200024a9050565b600180546001600160a01b0319169055620001918162000194565b50565b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610445806200145783390190565b610f85806200189c83390190565b6112f9806200282183390190565b610fe28062003b1a83390190565b5f602082840312156200022c575f80fd5b81516001600160401b038116811462000243575f80fd5b9392505050565b60805160a05160c05160e0516101005161117b620002dc5f395f61057701525f81816102e90152818161067a015281816109190152818161094801528181610b6c01528181610bc301528181610c7b0152610e3501525f81816104720152818161050501526107a201525f818161028e015281816105a5015261085401525f818161031a0152610b3d015261117b5ff3fe608060405234801561000f575f80fd5b5060043610610208575f3560e01c8063a40e69c71161011f578063e30c3978116100a9578063f5de852711610079578063f5de85271461056d578063f7260d3e14610575578063f9d8a5171461059b578063fc0c546a146105a3578063fed325c2146105c9575f80fd5b8063e30c397814610541578063e311a00914610529578063ee301c1614610552578063f2fde38b1461055a575f80fd5b8063c021e73c116100ef578063c021e73c14610503578063c608d67414610529578063c75eea9c14610494578063d7080f0914610531578063da008fc514610539575f80fd5b8063a40e69c71461043e578063a6c94a7314610453578063a8d87a3b14610461578063af58d59f14610494575f80fd5b806343d24152116101a05780636415175a116101705780636415175a14610403578063715018a61461040b57806379ba5097146104135780638abfab011461041b5780638da5cb5b1461042e575f80fd5b806343d24152146102d457806344671a5d146102e75780634e4bc8471461030d578063546719cd14610344575f80fd5b806320f938b6116101db57806320f938b61461028457806321df0da71461028c5780632e90aa21146102c6578063384b09e8146102cc575f80fd5b80630abaa60d1461020c57806313bb5ad014610216578063181f5a77146102295780631fc9cf1514610271575b5f80fd5b6102146105dc565b005b610214610224366004610f50565b6105ee565b604080518082018252601981527f526f757465725072696365526567697374727920312e352e3000000000000000602082015290516102689190610f81565b60405180910390f35b61021461027f366004610f50565b6106dd565b61021461083c565b7f00000000000000000000000000000000000000000000000000000000000000005b6040516001600160a01b039091168152602001610268565b306102ae565b6102146108a3565b6102146102e2366004610fe3565b61090b565b7f00000000000000000000000000000000000000000000000000000000000000006102ae565b6040516001600160401b037f0000000000000000000000000000000000000000000000000000000000000000168152602001610268565b6103a76040805160a0810182525f80825260208201819052918101829052606081018290526080810191909152506040805160a0810182525f80825263ffffffff4216602083015260019282019290925260326060820152608081019190915290565b604051610268919081516fffffffffffffffffffffffffffffffff908116825260208084015163ffffffff1690830152604080840151151590830152606080840151821690830152608092830151169181019190915260a00190565b610214610a12565b610214610a22565b610214610a33565b610214610429366004610f50565b610a77565b5f546001600160a01b03166102ae565b610446610aee565b604051610268919061100b565b6040515f8152602001610268565b6102ae61046f36600461106b565b507f000000000000000000000000000000000000000000000000000000000000000090565b6103a76104a236600461106b565b6040805160a0810182525f8082526020820181905291810182905260608101829052608081019190915250506040805160a0810182525f80825263ffffffff4216602083015260019282019290925260326060820152608081019190915290565b7f00000000000000000000000000000000000000000000000000000000000000006102ae565b610214610bb9565b610214610c31565b610214610c71565b6001546001600160a01b03166102ae565b610214610cd1565b61021461056836600461108b565b610ce1565b610214610d51565b7f00000000000000000000000000000000000000000000000000000000000000006102ae565b610214610d86565b7f00000000000000000000000000000000000000000000000000000000000000006102ae565b6102146105d7366004610f50565b610d96565b6105e4610eac565b6105ec610d51565b565b6105f6610eac565b8060ff168260ff1611156106255760405162461bcd60e51b815260040161061c906110b1565b60405180910390fd5b600154600160a01b90046001600160401b031660ff8216111561065a5760405162461bcd60e51b815260040161061c906110da565b60405163433760eb60e11b815260ff8084166004830152821660248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063866ec1d6906044015f604051808303815f87803b1580156106c3575f80fd5b505af11580156106d5573d5f803e3d5ffd5b505050505050565b6106e5610eac565b8060ff168260ff16111561070b5760405162461bcd60e51b815260040161061c906110b1565b600154600160a01b90046001600160401b031660ff8316116107665760405162461bcd60e51b81526020600482015260146024820152731b595cdcd859d948185b1c9958591e481cd95b9d60621b604482015260640161061c565b60ff82165b8160ff16816001600160401b031611610814576040516328d15f0960e11b81523360048201526001600160401b03821660248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906351a2be12906044015f604051808303815f87803b1580156107eb575f80fd5b505af11580156107fd573d5f803e3d5ffd5b50505050808061080c90611100565b91505061076b565b506001805467ffffffffffffffff60a01b191660ff92909216600160a01b0291909117905550565b60408051600181524260208201526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016917f52f50aa6d1a95a4595361ecf953d095f125d442e4673716dede699e049de148a91015b60405180910390a2565b604080515f808252602082018190526003928201929092526001600160401b03421660608201526080810182905260a081018290523391907f8137bc8a8d712aaa27bfc6506d5566ac405618bd53f9831b8ca6b6fe5442ee7a9060c0015b60405180910390a3565b5f60405180604001604052807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020017f000000000000000000000000000000000000000000000000000000000000000085856040516020016109a0939291906001600160a01b039390931683526001600160401b03918216602084015216604082015260600190565b60408051601f198184030181529181528151602092830120909252815183516001600160a01b0316815283820151918101919091525f918101829052919250907f8257378aa73bf8e4ada848713526584a3dcee0fd3db3beed7397f7a7f5067cc99060600160405180910390a2505050565b610a1a610eac565b6105ec6108a3565b610a2a610eac565b6105ec5f610ed8565b60015433906001600160a01b03168114610a6b5760405163118cdaa760e01b81526001600160a01b038216600482015260240161061c565b610a7481610ed8565b50565b610a7f610eac565b8060ff168260ff161115610aa55760405162461bcd60e51b815260040161061c906110b1565b600154600160a01b90046001600160401b031660ff82161115610ada5760405162461bcd60e51b815260040161061c906110da565b610aea8260ff168260ff1661090b565b5050565b6040805160018082528183019092526060915f9190816020015b604080518082019091525f8082526020820152815260200190600190039081610b0857905050905060405180604001604052807f00000000000000000000000000000000000000000000000000000000000000006001600160401b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316815250815f81518110610ba957610ba9611131565b6020908102919091010152919050565b610bc1610eac565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663cdffbd5f6040518163ffffffff1660e01b81526004015f604051808303815f87803b158015610c19575f80fd5b505af1158015610c2b573d5f803e3d5ffd5b50505050565b604080515f8082526001600160401b0342166020830152917fcfdbfd8ce9a56b5f7c202c0e102184d24f47ca87121dc165063fc4c290957bde9101610899565b610c79610eac565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166392abf95e6040518163ffffffff1660e01b81526004015f604051808303815f87803b158015610c19575f80fd5b610cd9610eac565b6105ec61083c565b610ce9610eac565b600180546001600160a01b0383166001600160a01b03199091168117909155610d195f546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b60405160648152339030907f2d87480f50083e2b2759522a8fdda59802650a8055e609a7772cf70c07748f5290602001610901565b610d8e610eac565b6105ec610c31565b610d9e610eac565b8060ff168260ff161115610dc45760405162461bcd60e51b815260040161061c906110b1565b600154600160a01b90046001600160401b031660ff82161115610df95760405162461bcd60e51b815260040161061c906110da565b60ff82165b8160ff16816001600160401b031611610ea75760405163cefe12c560e01b81523360048201526001600160401b03821660248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063cefe12c5906044015f604051808303815f87803b158015610e7e575f80fd5b505af1158015610e90573d5f803e3d5ffd5b505050508080610e9f90611100565b915050610dfe565b505050565b5f546001600160a01b031633146105ec5760405163118cdaa760e01b815233600482015260240161061c565b600180546001600160a01b0319169055610a74815f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b803560ff81168114610f4b575f80fd5b919050565b5f8060408385031215610f61575f80fd5b610f6a83610f3b565b9150610f7860208401610f3b565b90509250929050565b5f602080835283518060208501525f5b81811015610fad57858101830151858201604001528201610f91565b505f604082860101526040601f19601f8301168501019250505092915050565b80356001600160401b0381168114610f4b575f80fd5b5f8060408385031215610ff4575f80fd5b610ffd83610fcd565b9150610f7860208401610fcd565b602080825282518282018190525f919060409081850190868401855b8281101561105e57815180516001600160401b031685528601516001600160a01b0316868501529284019290850190600101611027565b5091979650505050505050565b5f6020828403121561107b575f80fd5b61108482610fcd565b9392505050565b5f6020828403121561109b575f80fd5b81356001600160a01b0381168114611084575f80fd5b6020808252600f908201526e1b9bdd1a1a5b99c81d1bc81cd95b99608a1b604082015260600190565b6020808252600c908201526b1b9bdd081e595d081cd95b9d60a21b604082015260600190565b5f6001600160401b0380831681810361112757634e487b7160e01b5f52601160045260245ffd5b6001019392505050565b634e487b7160e01b5f52603260045260245ffdfea2646970667358221220c7b38bc0659d3f01c15cb7e028fe0d17d529b6d6c9fdc0949c3b8fe7bab8d51164736f6c63430008180033608060405234801561000f575f80fd5b50338061003557604051631e4fbdf760e01b81525f600482015260240160405180910390fd5b61003e81610044565b506100af565b600180546001600160a01b031916905561005d81610060565b50565b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610389806100bc5f395ff3fe608060405234801561000f575f80fd5b5060043610610090575f3560e01c806379ba50971161006357806379ba50971461010f5780638da5cb5b1461011757806395d89b411461013b578063e30c39781461015b578063f2fde38b1461016c575f80fd5b8063181f5a7714610094578063313ce567146100d657806370a08231146100e4578063715018a614610105575b5f80fd5b6040805180820190915260148152730466972656472696c6c546f6b656e20312e302e360641b60208201525b6040516100cd91906102da565b60405180910390f35b6040515f81526020016100cd565b6100f76100f2366004610326565b505f90565b6040519081526020016100cd565b61010d61017f565b005b61010d610192565b5f546001600160a01b03165b6040516001600160a01b0390911681526020016100cd565b6040805180820190915260048152634c494e4b60e01b60208201526100c0565b6001546001600160a01b0316610123565b61010d61017a366004610326565b6101db565b61018761024b565b6101905f610277565b565b60015433906001600160a01b031681146101cf5760405163118cdaa760e01b81526001600160a01b03821660048201526024015b60405180910390fd5b6101d881610277565b50565b6101e361024b565b600180546001600160a01b0383166001600160a01b031990911681179091556102135f546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b5f546001600160a01b031633146101905760405163118cdaa760e01b81523360048201526024016101c6565b600180546001600160a01b03191690556101d8815f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b5f602080835283518060208501525f5b81811015610306578581018301518582016040015282016102ea565b505f604082860101526040601f19601f8301168501019250505092915050565b5f60208284031215610336575f80fd5b81356001600160a01b038116811461034c575f80fd5b939250505056fea264697066735822122073c9e3b0939622ca5302d370413bfe59d14db6fa7a6dc99daafdc9d33c3205dc64736f6c6343000818003360a060405234801561000f575f80fd5b50604051610f85380380610f8583398101604081905261002e916100d9565b338061005357604051631e4fbdf760e01b81525f600482015260240160405180910390fd5b61005c8161006e565b506001600160a01b0316608052610106565b600180546001600160a01b03191690556100878161008a565b50565b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b5f602082840312156100e9575f80fd5b81516001600160a01b03811681146100ff575f80fd5b9392505050565b608051610e3661014f5f395f8181610186015281816102b701528181610345015281816103d401528181610474015281816104b90152818161054901526106270152610e365ff3fe608060405234801561000f575f80fd5b5060043610610090575f3560e01c80637437ff9f116100635780637437ff9f146100fd57806379ba5097146102195780638da5cb5b14610221578063e30c397814610245578063f2fde38b14610256575f80fd5b806306285c6914610094578063181f5a77146100b257806351a2be12146100e0578063715018a6146100f5575b5f80fd5b61009c610269565b6040516100a9919061093c565b60405180910390f35b604080518082018252600c81526b04f6e52616d7020312e352e360a41b602082015290516100a99190610a32565b6100f36100ee366004610a74565b6104ae565b005b6100f36107e6565b61020c604080516101c0810182525f80825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081018290526101408101829052610160810182905261018081018290526101a081019190915250604080516101c0810182526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168082525f60208301819052928201839052606082018390526080820183905260a0820183905260c0820183905260e0820152610100810182905261012081018290526101408101829052610160810182905261018081018290526101a081019190915290565b6040516100a99190610aab565b6100f36107f9565b5f546001600160a01b03165b6040516001600160a01b0390911681526020016100a9565b6001546001600160a01b031661022d565b6100f3610264366004610bc1565b61083d565b60408051610100810182525f80825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101919091526040518061010001604052807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663fc0c546a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610311573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103359190610bdc565b6001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634e4bc8476040518163ffffffff1660e01b8152600401602060405180830381865afa15801561039f573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103c39190610bf7565b67ffffffffffffffff1681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634e4bc8476040518163ffffffff1660e01b8152600401602060405180830381865afa15801561042e573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104529190610bf7565b67ffffffffffffffff1681525f602082018190526040820181905260608201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166080820181905260a090910152919050565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461051a5760405162461bcd60e51b815260206004820152600c60248201526b1bdb9b1e4818dbdb9d1c9bdb60a21b60448201526064015b60405180910390fd5b7fd0c3c799bf9e2639de44391e7f524d229b2b55f5b1ea94b2bf7da42f7243dddd604051806101a001604052807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634e4bc8476040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105a3573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105c79190610bf7565b67ffffffffffffffff168152602001846001600160a01b03168152602001846001600160a01b031681526020018367ffffffffffffffff1681526020016103e881526020015f15158152602001600167ffffffffffffffff1681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663fc0c546a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610681573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906106a59190610bdc565b6001600160a01b031681526020015f81526020016040518060400160405280600381526020016231323360e81b81525081526020015f67ffffffffffffffff8111156106f3576106f3610c12565b60405190808252806020026020018201604052801561073757816020015b604080518082019091525f80825260208201528152602001906001900390816107115790505b5081526020015f60405190808252806020026020018201604052801561077157816020015b606081526020019060019003908161075c5790505b50815260200184846040516020016107b492919060609290921b6bffffffffffffffffffffffff1916825260c01b6001600160c01b0319166014820152601c0190565b604051602081830303815290604052805190602001208152506040516107da9190610ccc565b60405180910390a15050565b6107ee6108ad565b6107f75f6108d9565b565b60015433906001600160a01b031681146108315760405163118cdaa760e01b81526001600160a01b0382166004820152602401610511565b61083a816108d9565b50565b6108456108ad565b600180546001600160a01b0383166001600160a01b031990911681179091556108755f546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b5f546001600160a01b031633146107f75760405163118cdaa760e01b8152336004820152602401610511565b600180546001600160a01b031916905561083a815f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b5f6101008201905060018060a01b038351168252602083015167ffffffffffffffff808216602085015280604086015116604085015280606086015116606085015250506bffffffffffffffffffffffff608084015116608083015260a08301516109b260a08401826001600160a01b03169052565b5060c08301516109cd60c08401826001600160a01b03169052565b5060e08301516109e860e08401826001600160a01b03169052565b5092915050565b5f81518084525f5b81811015610a13576020818501810151868301820152016109f7565b505f602082860101526020601f19601f83011685010191505092915050565b602081525f610a4460208301846109ef565b9392505050565b6001600160a01b038116811461083a575f80fd5b67ffffffffffffffff8116811461083a575f80fd5b5f8060408385031215610a85575f80fd5b8235610a9081610a4b565b91506020830135610aa081610a5f565b809150509250929050565b81516001600160a01b031681526101c081016020830151610ad2602084018261ffff169052565b506040830151610aea604084018263ffffffff169052565b506060830151610b00606084018261ffff169052565b506080830151610b18608084018263ffffffff169052565b5060a0830151610b2e60a084018261ffff169052565b5060c0830151610b4460c084018261ffff169052565b5060e0830151610b5f60e08401826001600160a01b03169052565b506101008381015163ffffffff90811691840191909152610120808501518216908401526101408085015161ffff16908401526101608085015182169084015261018080850151909116908301526101a0928301511515929091019190915290565b5f60208284031215610bd1575f80fd5b8135610a4481610a4b565b5f60208284031215610bec575f80fd5b8151610a4481610a4b565b5f60208284031215610c07575f80fd5b8151610a4481610a5f565b634e487b7160e01b5f52604160045260245ffd5b5f815180845260208085019450602084015f5b83811015610c6957815180516001600160a01b031688528301518388015260409096019590820190600101610c39565b509495945050505050565b5f8282518085526020808601955060208260051b840101602086015f5b84811015610cbf57601f19868403018952610cad8383516109ef565b98840198925090830190600101610c91565b5090979650505050505050565b60208152610ce760208201835167ffffffffffffffff169052565b5f6020830151610d0260408401826001600160a01b03169052565b5060408301516001600160a01b038116606084015250606083015167ffffffffffffffff8116608084015250608083015160a083015260a0830151610d4b60c084018215159052565b5060c083015167ffffffffffffffff811660e08401525060e0830151610100610d7e818501836001600160a01b03169052565b840151610120848101919091528401516101a061014080860182905291925090610dac6101c08601846109ef565b9250808601519050601f19610160818786030181880152610dcd8584610c26565b945080880151925050610180818786030181880152610dec8584610c74565b97015195909201949094525092939250505056fea26469706673582212207e36995442a6a5bfa9bce975255e84754d0543a5fecf62b91e3757c53691368a64736f6c6343000818003360a060405234801561000f575f80fd5b506040516112f93803806112f983398101604081905261002e916100d9565b338061005357604051631e4fbdf760e01b81525f600482015260240160405180910390fd5b61005c8161006e565b506001600160a01b0316608052610106565b600180546001600160a01b03191690556100878161008a565b50565b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b5f602082840312156100e9575f80fd5b81516001600160a01b03811681146100ff575f80fd5b9392505050565b6080516111726101875f395f818161027401528181610367015281816103f50152818161048401528181610513015281816105a6015281816105db0152818161073401528181610822015281816108a10152818161090c0152818161099a01528181610a2901528181610ab801528181610b4f0152610bbe01526111725ff3fe608060405234801561000f575f80fd5b50600436106100e5575f3560e01c8063866ec1d611610088578063cdffbd5f11610063578063cdffbd5f146102e3578063cefe12c5146102eb578063e30c3978146102fe578063f2fde38b1461030f575f80fd5b8063866ec1d6146102b85780638da5cb5b146102cb57806392abf95e146102db575f80fd5b8063546719cd116100c3578063546719cd14610156578063715018a6146102155780637437ff9f1461021f57806379ba5097146102b0575f80fd5b806306285c69146100e9578063181f5a771461010757806321df0da714610136575b5f80fd5b6100f1610322565b6040516100fe9190610e04565b60405180910390f35b604080518082018252600d81526c04f666652616d7020312e352e3609c1b602082015290516100fe9190610e5b565b61013e6105d8565b6040516001600160a01b0390911681526020016100fe565b6101b96040805160a0810182525f80825260208201819052918101829052606081018290526080810191909152506040805160a0810182525f80825263ffffffff4216602083015260019282019290925260326060820152608081019190915290565b6040516100fe919081516fffffffffffffffffffffffffffffffff908116825260208084015163ffffffff1690830152604080840151151590830152606080840151821690830152608092830151169181019190915260a00190565b61021d61065e565b005b6102a36040805160a0810182525f80825260208201819052918101829052606081018290526080810191909152506040805160a081018252600a80825260208201819052918101919091526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660608201819052608082015290565b6040516100fe9190610ebf565b61021d610671565b61021d6102c6366004610ee2565b6106ba565b5f546001600160a01b031661013e565b61021d610817565b61021d610896565b61021d6102f9366004610f2d565b610bb3565b6001546001600160a01b031661013e565b61021d61031d366004610f49565b610c9f565b6040805160e0810182525f80825260208201819052918101829052606081018290526080810182905260a0810182905260c08101919091526040518060e001604052807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166344671a5d6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103c1573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103e59190610f64565b6001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634e4bc8476040518163ffffffff1660e01b8152600401602060405180830381865afa15801561044f573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104739190610f7f565b67ffffffffffffffff1681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634e4bc8476040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104de573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105029190610f7f565b67ffffffffffffffff1681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c021e73c6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561056d573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105919190610f64565b6001600160a01b0390811682525f60208301527f00000000000000000000000000000000000000000000000000000000000000001660408201819052606090910152919050565b5f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663fc0c546a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610635573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906106599190610f64565b905090565b610666610d0f565b61066f5f610d3b565b565b60015433906001600160a01b031681146106ae5760405163118cdaa760e01b81526001600160a01b03821660048201526024015b60405180910390fd5b6106b781610d3b565b50565b60408051808201909152606080825260208201525f60405180604001604052808567ffffffffffffffff1681526020018467ffffffffffffffff1681525090507f291698c01aa71f912280535d88a00d2c59fb63530a3f5d0098560468acb9ebf560405180606001604052808481526020018381526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166344671a5d6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561078e573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107b29190610f64565b604080516001600160a01b03909216602083015267ffffffffffffffff808a169183019190915287166060820152608001604051602081830303815290604052805190602001208152506040516108099190610ff2565b60405180910390a150505050565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461085f5760405162461bcd60e51b81526004016106a5906110be565b604051606481527f1871cdf8010e63f2eb8384381a68dfa7416dc571a5517e66e88b2d2d0c0a690a906020015b60405180910390a1565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146108de5760405162461bcd60e51b81526004016106a5906110be565b7f7879e20bb60a503429de4a2c912b5904f08a39f2af054c10fb46434b5d6112606040518060e001604052807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166344671a5d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610966573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061098a9190610f64565b6001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634e4bc8476040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109f4573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610a189190610f7f565b67ffffffffffffffff1681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634e4bc8476040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a83573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610aa79190610f7f565b67ffffffffffffffff1681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c021e73c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b12573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610b369190610f64565b6001600160a01b0390811682525f6020808401919091527f000000000000000000000000000000000000000000000000000000000000000090911660408084018290526060938401829052805160a081018252600a808252938101849052808201939093529282018190526080820152905161088c9291906110e4565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610bfb5760405162461bcd60e51b81526004016106a5906110be565b6040516bffffffffffffffffffffffff19606084901b1660208201526001600160c01b031960c083901b166034820152603c016040516020818303038152906040528051906020012060017fd4f851956a5d67c3997d1c9205045fef79bae2947fdee7e9e2641abc7391ef6560016040518060400160405280600381526020016231323360e81b815250604051610c93929190611100565b60405180910390a35050565b610ca7610d0f565b600180546001600160a01b0383166001600160a01b03199091168117909155610cd75f546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b5f546001600160a01b0316331461066f5760405163118cdaa760e01b81523360048201526024016106a5565b600180546001600160a01b03191690556106b7815f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60018060a01b03808251168352602082015167ffffffffffffffff808216602086015280604085015116604086015250508060608301511660608401528060808301511660808401528060a08301511660a08401528060c08301511660c0840152505050565b60e08101610e128284610d9e565b92915050565b5f81518084525f5b81811015610e3c57602081850181015186830182015201610e20565b505f602082860101526020601f19601f83011685010191505092915050565b602081525f610e6d6020830184610e18565b9392505050565b805163ffffffff90811683526020808301519091169083015260408082015161ffff16908301526060808201516001600160a01b039081169184019190915260809182015116910152565b60a08101610e128284610e74565b67ffffffffffffffff811681146106b7575f80fd5b5f8060408385031215610ef3575f80fd5b8235610efe81610ecd565b91506020830135610f0e81610ecd565b809150509250929050565b6001600160a01b03811681146106b7575f80fd5b5f8060408385031215610f3e575f80fd5b8235610efe81610f19565b5f60208284031215610f59575f80fd5b8135610e6d81610f19565b5f60208284031215610f74575f80fd5b8151610e6d81610f19565b5f60208284031215610f8f575f80fd5b8151610e6d81610ecd565b5f815180845260208085019450602084015f5b83811015610fe7578151805167ffffffffffffffff1688528301516001600160e01b03168388015260409096019590820190600101610fad565b509495945050505050565b602080825282516080838301528051604060a08501819052815160e086018190525f94939284019185916101008801905b8084101561105e57845180516001600160a01b031683528701516001600160e01b031687830152938601936001939093019290820190611023565b5093850151878503609f190160c08901529361107a8186610f9a565b95890151805167ffffffffffffffff90811660408b015260208201511660608a01529594506110a99350505050565b60408501516080850152809250505092915050565b6020808252600c908201526b1bdb9b1e4818dbdb9d1c9bdb60a21b604082015260600190565b61018081016110f38285610d9e565b610e6d60e0830184610e74565b5f6004841061111d57634e487b7160e01b5f52602160045260245ffd5b838252604060208301526111346040830184610e18565b94935050505056fea2646970667358221220e6fdb75b3e245281cabbae0d25c359e101f8274f5b4016dc3f4df9eedf5a19ec64736f6c6343000818003360a060405234801561000f575f80fd5b503360808190525f805460ff191660011790558061004657604051631e4fbdf760e01b81525f600482015260240160405180910390fd5b61004f81610055565b506100c2565b600380546001600160a01b031916905561006e81610071565b50565b600280546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b608051610ee56100fd5f395f818161034c0152818161043c015281816104da01528181610577015281816105c501526106470152610ee55ff3fe6080604052600436106100dc575f3560e01c806379ba50971161007c5780638fb5f171116100575780638fb5f17114610276578063b99152d0146102a2578063e30c3978146102cf578063f2fde38b146102ec575f80fd5b806379ba50971461021257806385572ffb146102265780638da5cb5b14610245575f80fd5b806324600fc3116100b757806324600fc3146101b35780635100fc21146101c7578063715018a6146101df57806377f5b0e6146101f3575f80fd5b806301ffc9a71461013d57806306b091f914610171578063181f5a7714610192575f80fd5b36610139575f5460ff161561010457604051633085b8db60e01b815260040160405180910390fd5b6040513481527fe12e3b7047ff60a2dd763cf536a43597e5ce7fe7aa7476345bd4cd079912bcef9060200160405180910390a1005b5f80fd5b348015610148575f80fd5b5061015c610157366004610926565b61030b565b60405190151581526020015b60405180910390f35b34801561017c575f80fd5b5061019061018b366004610968565b610341565b005b34801561019d575f80fd5b506101a661054c565b6040516101689190610990565b3480156101be575f80fd5b5061019061056c565b3480156101d2575f80fd5b505f5461015c9060ff1681565b3480156101ea575f80fd5b506101906106ac565b3480156101fe575f80fd5b5061019061020d3660046109f0565b6106bf565b34801561021d575f80fd5b506101906106cf565b348015610231575f80fd5b50610190610240366004610a9b565b610713565b348015610250575f80fd5b506002546001600160a01b03165b6040516001600160a01b039091168152602001610168565b348015610281575f80fd5b50610190610290366004610adf565b5f805460ff1916911515919091179055565b3480156102ad575f80fd5b506102c16102bc366004610afa565b6107b2565b604051908152602001610168565b3480156102da575f80fd5b506003546001600160a01b031661025e565b3480156102f7575f80fd5b50610190610306366004610afa565b610823565b5f6001600160e01b031982166385572ffb60e01b148061033b57506001600160e01b031982166301ffc9a760e01b145b92915050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610389576040516282b42960e81b815260040160405180910390fd5b6040516370a0823160e01b815230600482015282905f906001600160a01b038316906370a0823190602401602060405180830381865afa1580156103cf573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103f39190610b13565b9050828110156104255760405163cf47918160e01b815260048101829052602481018490526044015b60405180910390fd5b60405163a9059cbb60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018590525f919084169063a9059cbb906044016020604051808303815f875af1158015610494573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104b89190610b2a565b9050806104d8576040516312171d8360e31b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316856001600160a01b03167f6337ed398c0e8467698c581374fdce4db14922df487b5a39483079f5f59b60a48660405161053d91815260200190565b60405180910390a35050505050565b6060604051806060016040528060248152602001610e8c60249139905090565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146105b4576040516282b42960e81b815260040160405180910390fd5b60405147905f906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169083908381818185875af1925050503d805f811461061e576040519150601f19603f3d011682016040523d82523d5f602084013e610623565b606091505b5050905080610645576040516312171d8360e31b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167fd50b71a2790ecccf5881141fe9ae079e17c66aace5d50ba383d443ecd398ffa5836040516106a091815260200190565b60405180910390a25050565b6106b4610894565b6106bd5f6108c1565b565b60016106cb8282610bc9565b5050565b60035433906001600160a01b031681146107075760405163118cdaa760e01b81526001600160a01b038216600482015260240161041c565b610710816108c1565b50565b5f5460ff1615610739576001604051635a4ff67160e01b815260040161041c9190610c89565b7f707732b700184c0ab3b799f43f03de9b3606a144cfb367f98291044e71972cdc813561076c6040840160208501610d13565b6107796040850185610d3a565b6107866060870187610d3a565b6107936080890189610d84565b6040516107a7989796959493929190610df2565b60405180910390a150565b6040516370a0823160e01b81523060048201525f9082906001600160a01b038216906370a0823190602401602060405180830381865afa1580156107f8573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061081c9190610b13565b9392505050565b61082b610894565b600380546001600160a01b0383166001600160a01b0319909116811790915561085c6002546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b6002546001600160a01b031633146106bd5760405163118cdaa760e01b815233600482015260240161041c565b600380546001600160a01b031916905561071081600280546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b5f60208284031215610936575f80fd5b81356001600160e01b03198116811461081c575f80fd5b80356001600160a01b0381168114610963575f80fd5b919050565b5f8060408385031215610979575f80fd5b6109828361094d565b946020939093013593505050565b5f602080835283518060208501525f5b818110156109bc578581018301518582016040015282016109a0565b505f604082860101526040601f19601f8301168501019250505092915050565b634e487b7160e01b5f52604160045260245ffd5b5f60208284031215610a00575f80fd5b813567ffffffffffffffff80821115610a17575f80fd5b818401915084601f830112610a2a575f80fd5b813581811115610a3c57610a3c6109dc565b604051601f8201601f19908116603f01168101908382118183101715610a6457610a646109dc565b81604052828152876020848701011115610a7c575f80fd5b826020860160208301375f928101602001929092525095945050505050565b5f60208284031215610aab575f80fd5b813567ffffffffffffffff811115610ac1575f80fd5b820160a0818503121561081c575f80fd5b8015158114610710575f80fd5b5f60208284031215610aef575f80fd5b813561081c81610ad2565b5f60208284031215610b0a575f80fd5b61081c8261094d565b5f60208284031215610b23575f80fd5b5051919050565b5f60208284031215610b3a575f80fd5b815161081c81610ad2565b600181811c90821680610b5957607f821691505b602082108103610b7757634e487b7160e01b5f52602260045260245ffd5b50919050565b601f821115610bc457805f5260205f20601f840160051c81016020851015610ba25750805b601f840160051c820191505b81811015610bc1575f8155600101610bae565b50505b505050565b815167ffffffffffffffff811115610be357610be36109dc565b610bf781610bf18454610b45565b84610b7d565b602080601f831160018114610c2a575f8415610c135750858301515b5f19600386901b1c1916600185901b178555610c81565b5f85815260208120601f198616915b82811015610c5857888601518255948401946001909101908401610c39565b5085821015610c7557878501515f19600388901b60f8161c191681555b505060018460011b0185555b505050505050565b5f60208083525f8454610c9b81610b45565b806020870152604060018084165f8114610cbc5760018114610cd857610d05565b60ff19851660408a0152604084151560051b8a01019550610d05565b895f5260205f205f5b85811015610cfc5781548b8201860152908301908801610ce1565b8a016040019650505b509398975050505050505050565b5f60208284031215610d23575f80fd5b813567ffffffffffffffff8116811461081c575f80fd5b5f808335601e19843603018112610d4f575f80fd5b83018035915067ffffffffffffffff821115610d69575f80fd5b602001915036819003821315610d7d575f80fd5b9250929050565b5f808335601e19843603018112610d99575f80fd5b83018035915067ffffffffffffffff821115610db3575f80fd5b6020019150600681901b3603821315610d7d575f80fd5b81835281816020850137505f828201602090810191909152601f909101601f19169091010190565b8881525f602067ffffffffffffffff8a166020840152604060a06040850152610e1f60a085018a8c610dca565b8481036060860152610e3281898b610dca565b85810360808701528681528791506020015f5b87811015610e79576001600160a01b03610e5e8461094d565b16825282850135858301529183019190830190600101610e45565b509d9c5050505050505050505050505056fe466972656472696c6c5265766572744d657373616765526563656976657220312e302e30a2646970667358221220d345a01f681061433196d8069e7b6abee675d8f4be98ee7f3561c91486be856164736f6c63430008180033",
}

// FiredrillEntrypointABI is the input ABI used to generate the binding from.
// Deprecated: Use FiredrillEntrypointMetaData.ABI instead.
var FiredrillEntrypointABI = FiredrillEntrypointMetaData.ABI

// FiredrillEntrypointBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use FiredrillEntrypointMetaData.Bin instead.
var FiredrillEntrypointBin = FiredrillEntrypointMetaData.Bin

// DeployFiredrillEntrypoint deploys a new Ethereum contract, binding an instance of FiredrillEntrypoint to it.
func DeployFiredrillEntrypoint(auth *bind.TransactOpts, backend bind.ContractBackend, chainSelector uint64) (common.Address, *types.Transaction, *FiredrillEntrypoint, error) {
	parsed, err := FiredrillEntrypointMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(FiredrillEntrypointBin), backend, chainSelector)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &FiredrillEntrypoint{FiredrillEntrypointCaller: FiredrillEntrypointCaller{contract: contract}, FiredrillEntrypointTransactor: FiredrillEntrypointTransactor{contract: contract}, FiredrillEntrypointFilterer: FiredrillEntrypointFilterer{contract: contract}}, nil
}

// FiredrillEntrypoint is an auto generated Go binding around an Ethereum contract.
type FiredrillEntrypoint struct {
	FiredrillEntrypointCaller     // Read-only binding to the contract
	FiredrillEntrypointTransactor // Write-only binding to the contract
	FiredrillEntrypointFilterer   // Log filterer for contract events
}

// FiredrillEntrypointCaller is an auto generated read-only Go binding around an Ethereum contract.
type FiredrillEntrypointCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FiredrillEntrypointTransactor is an auto generated write-only Go binding around an Ethereum contract.
type FiredrillEntrypointTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FiredrillEntrypointFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type FiredrillEntrypointFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FiredrillEntrypointSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type FiredrillEntrypointSession struct {
	Contract     *FiredrillEntrypoint // Generic contract binding to set the session for
	CallOpts     bind.CallOpts        // Call options to use throughout this session
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// FiredrillEntrypointCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type FiredrillEntrypointCallerSession struct {
	Contract *FiredrillEntrypointCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts              // Call options to use throughout this session
}

// FiredrillEntrypointTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type FiredrillEntrypointTransactorSession struct {
	Contract     *FiredrillEntrypointTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts              // Transaction auth options to use throughout this session
}

// FiredrillEntrypointRaw is an auto generated low-level Go binding around an Ethereum contract.
type FiredrillEntrypointRaw struct {
	Contract *FiredrillEntrypoint // Generic contract binding to access the raw methods on
}

// FiredrillEntrypointCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type FiredrillEntrypointCallerRaw struct {
	Contract *FiredrillEntrypointCaller // Generic read-only contract binding to access the raw methods on
}

// FiredrillEntrypointTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type FiredrillEntrypointTransactorRaw struct {
	Contract *FiredrillEntrypointTransactor // Generic write-only contract binding to access the raw methods on
}

// NewFiredrillEntrypoint creates a new instance of FiredrillEntrypoint, bound to a specific deployed contract.
func NewFiredrillEntrypoint(address common.Address, backend bind.ContractBackend) (*FiredrillEntrypoint, error) {
	contract, err := bindFiredrillEntrypoint(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &FiredrillEntrypoint{FiredrillEntrypointCaller: FiredrillEntrypointCaller{contract: contract}, FiredrillEntrypointTransactor: FiredrillEntrypointTransactor{contract: contract}, FiredrillEntrypointFilterer: FiredrillEntrypointFilterer{contract: contract}}, nil
}

// NewFiredrillEntrypointCaller creates a new read-only instance of FiredrillEntrypoint, bound to a specific deployed contract.
func NewFiredrillEntrypointCaller(address common.Address, caller bind.ContractCaller) (*FiredrillEntrypointCaller, error) {
	contract, err := bindFiredrillEntrypoint(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &FiredrillEntrypointCaller{contract: contract}, nil
}

// NewFiredrillEntrypointTransactor creates a new write-only instance of FiredrillEntrypoint, bound to a specific deployed contract.
func NewFiredrillEntrypointTransactor(address common.Address, transactor bind.ContractTransactor) (*FiredrillEntrypointTransactor, error) {
	contract, err := bindFiredrillEntrypoint(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &FiredrillEntrypointTransactor{contract: contract}, nil
}

// NewFiredrillEntrypointFilterer creates a new log filterer instance of FiredrillEntrypoint, bound to a specific deployed contract.
func NewFiredrillEntrypointFilterer(address common.Address, filterer bind.ContractFilterer) (*FiredrillEntrypointFilterer, error) {
	contract, err := bindFiredrillEntrypoint(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &FiredrillEntrypointFilterer{contract: contract}, nil
}

// bindFiredrillEntrypoint binds a generic wrapper to an already deployed contract.
func bindFiredrillEntrypoint(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := FiredrillEntrypointMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_FiredrillEntrypoint *FiredrillEntrypointRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _FiredrillEntrypoint.Contract.FiredrillEntrypointCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_FiredrillEntrypoint *FiredrillEntrypointRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FiredrillEntrypoint.Contract.FiredrillEntrypointTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_FiredrillEntrypoint *FiredrillEntrypointRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _FiredrillEntrypoint.Contract.FiredrillEntrypointTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_FiredrillEntrypoint *FiredrillEntrypointCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _FiredrillEntrypoint.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_FiredrillEntrypoint *FiredrillEntrypointTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FiredrillEntrypoint.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_FiredrillEntrypoint *FiredrillEntrypointTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _FiredrillEntrypoint.Contract.contract.Transact(opts, method, params...)
}

// ChainSelector is a free data retrieval call binding the contract method 0x4e4bc847.
//
// Solidity: function chainSelector() view returns(uint64)
func (_FiredrillEntrypoint *FiredrillEntrypointCaller) ChainSelector(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _FiredrillEntrypoint.contract.Call(opts, &out, "chainSelector")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ChainSelector is a free data retrieval call binding the contract method 0x4e4bc847.
//
// Solidity: function chainSelector() view returns(uint64)
func (_FiredrillEntrypoint *FiredrillEntrypointSession) ChainSelector() (uint64, error) {
	return _FiredrillEntrypoint.Contract.ChainSelector(&_FiredrillEntrypoint.CallOpts)
}

// ChainSelector is a free data retrieval call binding the contract method 0x4e4bc847.
//
// Solidity: function chainSelector() view returns(uint64)
func (_FiredrillEntrypoint *FiredrillEntrypointCallerSession) ChainSelector() (uint64, error) {
	return _FiredrillEntrypoint.Contract.ChainSelector(&_FiredrillEntrypoint.CallOpts)
}

// CurrentRateLimiterState is a free data retrieval call binding the contract method 0x546719cd.
//
// Solidity: function currentRateLimiterState() view returns((uint128,uint32,bool,uint128,uint128))
func (_FiredrillEntrypoint *FiredrillEntrypointCaller) CurrentRateLimiterState(opts *bind.CallOpts) (FiredrillCompoundTokenBucket, error) {
	var out []interface{}
	err := _FiredrillEntrypoint.contract.Call(opts, &out, "currentRateLimiterState")

	if err != nil {
		return *new(FiredrillCompoundTokenBucket), err
	}

	out0 := *abi.ConvertType(out[0], new(FiredrillCompoundTokenBucket)).(*FiredrillCompoundTokenBucket)

	return out0, err

}

// CurrentRateLimiterState is a free data retrieval call binding the contract method 0x546719cd.
//
// Solidity: function currentRateLimiterState() view returns((uint128,uint32,bool,uint128,uint128))
func (_FiredrillEntrypoint *FiredrillEntrypointSession) CurrentRateLimiterState() (FiredrillCompoundTokenBucket, error) {
	return _FiredrillEntrypoint.Contract.CurrentRateLimiterState(&_FiredrillEntrypoint.CallOpts)
}

// CurrentRateLimiterState is a free data retrieval call binding the contract method 0x546719cd.
//
// Solidity: function currentRateLimiterState() view returns((uint128,uint32,bool,uint128,uint128))
func (_FiredrillEntrypoint *FiredrillEntrypointCallerSession) CurrentRateLimiterState() (FiredrillCompoundTokenBucket, error) {
	return _FiredrillEntrypoint.Contract.CurrentRateLimiterState(&_FiredrillEntrypoint.CallOpts)
}

// GetARM is a free data retrieval call binding the contract method 0x2e90aa21.
//
// Solidity: function getARM() view returns(address)
func (_FiredrillEntrypoint *FiredrillEntrypointCaller) GetARM(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _FiredrillEntrypoint.contract.Call(opts, &out, "getARM")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetARM is a free data retrieval call binding the contract method 0x2e90aa21.
//
// Solidity: function getARM() view returns(address)
func (_FiredrillEntrypoint *FiredrillEntrypointSession) GetARM() (common.Address, error) {
	return _FiredrillEntrypoint.Contract.GetARM(&_FiredrillEntrypoint.CallOpts)
}

// GetARM is a free data retrieval call binding the contract method 0x2e90aa21.
//
// Solidity: function getARM() view returns(address)
func (_FiredrillEntrypoint *FiredrillEntrypointCallerSession) GetARM() (common.Address, error) {
	return _FiredrillEntrypoint.Contract.GetARM(&_FiredrillEntrypoint.CallOpts)
}

// GetCurrentInboundRateLimiterState is a free data retrieval call binding the contract method 0xaf58d59f.
//
// Solidity: function getCurrentInboundRateLimiterState(uint64 ) view returns((uint128,uint32,bool,uint128,uint128))
func (_FiredrillEntrypoint *FiredrillEntrypointCaller) GetCurrentInboundRateLimiterState(opts *bind.CallOpts, arg0 uint64) (FiredrillCompoundTokenBucket, error) {
	var out []interface{}
	err := _FiredrillEntrypoint.contract.Call(opts, &out, "getCurrentInboundRateLimiterState", arg0)

	if err != nil {
		return *new(FiredrillCompoundTokenBucket), err
	}

	out0 := *abi.ConvertType(out[0], new(FiredrillCompoundTokenBucket)).(*FiredrillCompoundTokenBucket)

	return out0, err

}

// GetCurrentInboundRateLimiterState is a free data retrieval call binding the contract method 0xaf58d59f.
//
// Solidity: function getCurrentInboundRateLimiterState(uint64 ) view returns((uint128,uint32,bool,uint128,uint128))
func (_FiredrillEntrypoint *FiredrillEntrypointSession) GetCurrentInboundRateLimiterState(arg0 uint64) (FiredrillCompoundTokenBucket, error) {
	return _FiredrillEntrypoint.Contract.GetCurrentInboundRateLimiterState(&_FiredrillEntrypoint.CallOpts, arg0)
}

// GetCurrentInboundRateLimiterState is a free data retrieval call binding the contract method 0xaf58d59f.
//
// Solidity: function getCurrentInboundRateLimiterState(uint64 ) view returns((uint128,uint32,bool,uint128,uint128))
func (_FiredrillEntrypoint *FiredrillEntrypointCallerSession) GetCurrentInboundRateLimiterState(arg0 uint64) (FiredrillCompoundTokenBucket, error) {
	return _FiredrillEntrypoint.Contract.GetCurrentInboundRateLimiterState(&_FiredrillEntrypoint.CallOpts, arg0)
}

// GetCurrentOutboundRateLimiterState is a free data retrieval call binding the contract method 0xc75eea9c.
//
// Solidity: function getCurrentOutboundRateLimiterState(uint64 ) view returns((uint128,uint32,bool,uint128,uint128))
func (_FiredrillEntrypoint *FiredrillEntrypointCaller) GetCurrentOutboundRateLimiterState(opts *bind.CallOpts, arg0 uint64) (FiredrillCompoundTokenBucket, error) {
	var out []interface{}
	err := _FiredrillEntrypoint.contract.Call(opts, &out, "getCurrentOutboundRateLimiterState", arg0)

	if err != nil {
		return *new(FiredrillCompoundTokenBucket), err
	}

	out0 := *abi.ConvertType(out[0], new(FiredrillCompoundTokenBucket)).(*FiredrillCompoundTokenBucket)

	return out0, err

}

// GetCurrentOutboundRateLimiterState is a free data retrieval call binding the contract method 0xc75eea9c.
//
// Solidity: function getCurrentOutboundRateLimiterState(uint64 ) view returns((uint128,uint32,bool,uint128,uint128))
func (_FiredrillEntrypoint *FiredrillEntrypointSession) GetCurrentOutboundRateLimiterState(arg0 uint64) (FiredrillCompoundTokenBucket, error) {
	return _FiredrillEntrypoint.Contract.GetCurrentOutboundRateLimiterState(&_FiredrillEntrypoint.CallOpts, arg0)
}

// GetCurrentOutboundRateLimiterState is a free data retrieval call binding the contract method 0xc75eea9c.
//
// Solidity: function getCurrentOutboundRateLimiterState(uint64 ) view returns((uint128,uint32,bool,uint128,uint128))
func (_FiredrillEntrypoint *FiredrillEntrypointCallerSession) GetCurrentOutboundRateLimiterState(arg0 uint64) (FiredrillCompoundTokenBucket, error) {
	return _FiredrillEntrypoint.Contract.GetCurrentOutboundRateLimiterState(&_FiredrillEntrypoint.CallOpts, arg0)
}

// GetOffRamps is a free data retrieval call binding the contract method 0xa40e69c7.
//
// Solidity: function getOffRamps() view returns((uint64,address)[])
func (_FiredrillEntrypoint *FiredrillEntrypointCaller) GetOffRamps(opts *bind.CallOpts) ([]FiredrillCompoundOffRamp, error) {
	var out []interface{}
	err := _FiredrillEntrypoint.contract.Call(opts, &out, "getOffRamps")

	if err != nil {
		return *new([]FiredrillCompoundOffRamp), err
	}

	out0 := *abi.ConvertType(out[0], new([]FiredrillCompoundOffRamp)).(*[]FiredrillCompoundOffRamp)

	return out0, err

}

// GetOffRamps is a free data retrieval call binding the contract method 0xa40e69c7.
//
// Solidity: function getOffRamps() view returns((uint64,address)[])
func (_FiredrillEntrypoint *FiredrillEntrypointSession) GetOffRamps() ([]FiredrillCompoundOffRamp, error) {
	return _FiredrillEntrypoint.Contract.GetOffRamps(&_FiredrillEntrypoint.CallOpts)
}

// GetOffRamps is a free data retrieval call binding the contract method 0xa40e69c7.
//
// Solidity: function getOffRamps() view returns((uint64,address)[])
func (_FiredrillEntrypoint *FiredrillEntrypointCallerSession) GetOffRamps() ([]FiredrillCompoundOffRamp, error) {
	return _FiredrillEntrypoint.Contract.GetOffRamps(&_FiredrillEntrypoint.CallOpts)
}

// GetOnRamp is a free data retrieval call binding the contract method 0xa8d87a3b.
//
// Solidity: function getOnRamp(uint64 ) view returns(address)
func (_FiredrillEntrypoint *FiredrillEntrypointCaller) GetOnRamp(opts *bind.CallOpts, arg0 uint64) (common.Address, error) {
	var out []interface{}
	err := _FiredrillEntrypoint.contract.Call(opts, &out, "getOnRamp", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetOnRamp is a free data retrieval call binding the contract method 0xa8d87a3b.
//
// Solidity: function getOnRamp(uint64 ) view returns(address)
func (_FiredrillEntrypoint *FiredrillEntrypointSession) GetOnRamp(arg0 uint64) (common.Address, error) {
	return _FiredrillEntrypoint.Contract.GetOnRamp(&_FiredrillEntrypoint.CallOpts, arg0)
}

// GetOnRamp is a free data retrieval call binding the contract method 0xa8d87a3b.
//
// Solidity: function getOnRamp(uint64 ) view returns(address)
func (_FiredrillEntrypoint *FiredrillEntrypointCallerSession) GetOnRamp(arg0 uint64) (common.Address, error) {
	return _FiredrillEntrypoint.Contract.GetOnRamp(&_FiredrillEntrypoint.CallOpts, arg0)
}

// GetStalenessThreshold is a free data retrieval call binding the contract method 0xa6c94a73.
//
// Solidity: function getStalenessThreshold() pure returns(uint128)
func (_FiredrillEntrypoint *FiredrillEntrypointCaller) GetStalenessThreshold(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _FiredrillEntrypoint.contract.Call(opts, &out, "getStalenessThreshold")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetStalenessThreshold is a free data retrieval call binding the contract method 0xa6c94a73.
//
// Solidity: function getStalenessThreshold() pure returns(uint128)
func (_FiredrillEntrypoint *FiredrillEntrypointSession) GetStalenessThreshold() (*big.Int, error) {
	return _FiredrillEntrypoint.Contract.GetStalenessThreshold(&_FiredrillEntrypoint.CallOpts)
}

// GetStalenessThreshold is a free data retrieval call binding the contract method 0xa6c94a73.
//
// Solidity: function getStalenessThreshold() pure returns(uint128)
func (_FiredrillEntrypoint *FiredrillEntrypointCallerSession) GetStalenessThreshold() (*big.Int, error) {
	return _FiredrillEntrypoint.Contract.GetStalenessThreshold(&_FiredrillEntrypoint.CallOpts)
}

// GetToken is a free data retrieval call binding the contract method 0x21df0da7.
//
// Solidity: function getToken() view returns(address)
func (_FiredrillEntrypoint *FiredrillEntrypointCaller) GetToken(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _FiredrillEntrypoint.contract.Call(opts, &out, "getToken")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetToken is a free data retrieval call binding the contract method 0x21df0da7.
//
// Solidity: function getToken() view returns(address)
func (_FiredrillEntrypoint *FiredrillEntrypointSession) GetToken() (common.Address, error) {
	return _FiredrillEntrypoint.Contract.GetToken(&_FiredrillEntrypoint.CallOpts)
}

// GetToken is a free data retrieval call binding the contract method 0x21df0da7.
//
// Solidity: function getToken() view returns(address)
func (_FiredrillEntrypoint *FiredrillEntrypointCallerSession) GetToken() (common.Address, error) {
	return _FiredrillEntrypoint.Contract.GetToken(&_FiredrillEntrypoint.CallOpts)
}

// OffRamp is a free data retrieval call binding the contract method 0x44671a5d.
//
// Solidity: function offRamp() view returns(address)
func (_FiredrillEntrypoint *FiredrillEntrypointCaller) OffRamp(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _FiredrillEntrypoint.contract.Call(opts, &out, "offRamp")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OffRamp is a free data retrieval call binding the contract method 0x44671a5d.
//
// Solidity: function offRamp() view returns(address)
func (_FiredrillEntrypoint *FiredrillEntrypointSession) OffRamp() (common.Address, error) {
	return _FiredrillEntrypoint.Contract.OffRamp(&_FiredrillEntrypoint.CallOpts)
}

// OffRamp is a free data retrieval call binding the contract method 0x44671a5d.
//
// Solidity: function offRamp() view returns(address)
func (_FiredrillEntrypoint *FiredrillEntrypointCallerSession) OffRamp() (common.Address, error) {
	return _FiredrillEntrypoint.Contract.OffRamp(&_FiredrillEntrypoint.CallOpts)
}

// OnRamp is a free data retrieval call binding the contract method 0xc021e73c.
//
// Solidity: function onRamp() view returns(address)
func (_FiredrillEntrypoint *FiredrillEntrypointCaller) OnRamp(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _FiredrillEntrypoint.contract.Call(opts, &out, "onRamp")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OnRamp is a free data retrieval call binding the contract method 0xc021e73c.
//
// Solidity: function onRamp() view returns(address)
func (_FiredrillEntrypoint *FiredrillEntrypointSession) OnRamp() (common.Address, error) {
	return _FiredrillEntrypoint.Contract.OnRamp(&_FiredrillEntrypoint.CallOpts)
}

// OnRamp is a free data retrieval call binding the contract method 0xc021e73c.
//
// Solidity: function onRamp() view returns(address)
func (_FiredrillEntrypoint *FiredrillEntrypointCallerSession) OnRamp() (common.Address, error) {
	return _FiredrillEntrypoint.Contract.OnRamp(&_FiredrillEntrypoint.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_FiredrillEntrypoint *FiredrillEntrypointCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _FiredrillEntrypoint.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_FiredrillEntrypoint *FiredrillEntrypointSession) Owner() (common.Address, error) {
	return _FiredrillEntrypoint.Contract.Owner(&_FiredrillEntrypoint.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_FiredrillEntrypoint *FiredrillEntrypointCallerSession) Owner() (common.Address, error) {
	return _FiredrillEntrypoint.Contract.Owner(&_FiredrillEntrypoint.CallOpts)
}

// PendingOwner is a free data retrieval call binding the contract method 0xe30c3978.
//
// Solidity: function pendingOwner() view returns(address)
func (_FiredrillEntrypoint *FiredrillEntrypointCaller) PendingOwner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _FiredrillEntrypoint.contract.Call(opts, &out, "pendingOwner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PendingOwner is a free data retrieval call binding the contract method 0xe30c3978.
//
// Solidity: function pendingOwner() view returns(address)
func (_FiredrillEntrypoint *FiredrillEntrypointSession) PendingOwner() (common.Address, error) {
	return _FiredrillEntrypoint.Contract.PendingOwner(&_FiredrillEntrypoint.CallOpts)
}

// PendingOwner is a free data retrieval call binding the contract method 0xe30c3978.
//
// Solidity: function pendingOwner() view returns(address)
func (_FiredrillEntrypoint *FiredrillEntrypointCallerSession) PendingOwner() (common.Address, error) {
	return _FiredrillEntrypoint.Contract.PendingOwner(&_FiredrillEntrypoint.CallOpts)
}

// Receiver is a free data retrieval call binding the contract method 0xf7260d3e.
//
// Solidity: function receiver() view returns(address)
func (_FiredrillEntrypoint *FiredrillEntrypointCaller) Receiver(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _FiredrillEntrypoint.contract.Call(opts, &out, "receiver")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Receiver is a free data retrieval call binding the contract method 0xf7260d3e.
//
// Solidity: function receiver() view returns(address)
func (_FiredrillEntrypoint *FiredrillEntrypointSession) Receiver() (common.Address, error) {
	return _FiredrillEntrypoint.Contract.Receiver(&_FiredrillEntrypoint.CallOpts)
}

// Receiver is a free data retrieval call binding the contract method 0xf7260d3e.
//
// Solidity: function receiver() view returns(address)
func (_FiredrillEntrypoint *FiredrillEntrypointCallerSession) Receiver() (common.Address, error) {
	return _FiredrillEntrypoint.Contract.Receiver(&_FiredrillEntrypoint.CallOpts)
}

// Token is a free data retrieval call binding the contract method 0xfc0c546a.
//
// Solidity: function token() view returns(address)
func (_FiredrillEntrypoint *FiredrillEntrypointCaller) Token(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _FiredrillEntrypoint.contract.Call(opts, &out, "token")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Token is a free data retrieval call binding the contract method 0xfc0c546a.
//
// Solidity: function token() view returns(address)
func (_FiredrillEntrypoint *FiredrillEntrypointSession) Token() (common.Address, error) {
	return _FiredrillEntrypoint.Contract.Token(&_FiredrillEntrypoint.CallOpts)
}

// Token is a free data retrieval call binding the contract method 0xfc0c546a.
//
// Solidity: function token() view returns(address)
func (_FiredrillEntrypoint *FiredrillEntrypointCallerSession) Token() (common.Address, error) {
	return _FiredrillEntrypoint.Contract.Token(&_FiredrillEntrypoint.CallOpts)
}

// TypeAndVersion is a free data retrieval call binding the contract method 0x181f5a77.
//
// Solidity: function typeAndVersion() pure returns(string)
func (_FiredrillEntrypoint *FiredrillEntrypointCaller) TypeAndVersion(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _FiredrillEntrypoint.contract.Call(opts, &out, "typeAndVersion")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TypeAndVersion is a free data retrieval call binding the contract method 0x181f5a77.
//
// Solidity: function typeAndVersion() pure returns(string)
func (_FiredrillEntrypoint *FiredrillEntrypointSession) TypeAndVersion() (string, error) {
	return _FiredrillEntrypoint.Contract.TypeAndVersion(&_FiredrillEntrypoint.CallOpts)
}

// TypeAndVersion is a free data retrieval call binding the contract method 0x181f5a77.
//
// Solidity: function typeAndVersion() pure returns(string)
func (_FiredrillEntrypoint *FiredrillEntrypointCallerSession) TypeAndVersion() (string, error) {
	return _FiredrillEntrypoint.Contract.TypeAndVersion(&_FiredrillEntrypoint.CallOpts)
}

// AcceptOwnership is a paid mutator transaction binding the contract method 0x79ba5097.
//
// Solidity: function acceptOwnership() returns()
func (_FiredrillEntrypoint *FiredrillEntrypointTransactor) AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FiredrillEntrypoint.contract.Transact(opts, "acceptOwnership")
}

// AcceptOwnership is a paid mutator transaction binding the contract method 0x79ba5097.
//
// Solidity: function acceptOwnership() returns()
func (_FiredrillEntrypoint *FiredrillEntrypointSession) AcceptOwnership() (*types.Transaction, error) {
	return _FiredrillEntrypoint.Contract.AcceptOwnership(&_FiredrillEntrypoint.TransactOpts)
}

// AcceptOwnership is a paid mutator transaction binding the contract method 0x79ba5097.
//
// Solidity: function acceptOwnership() returns()
func (_FiredrillEntrypoint *FiredrillEntrypointTransactorSession) AcceptOwnership() (*types.Transaction, error) {
	return _FiredrillEntrypoint.Contract.AcceptOwnership(&_FiredrillEntrypoint.TransactOpts)
}

// DrillInvalidMessageState is a paid mutator transaction binding the contract method 0xfed325c2.
//
// Solidity: function drill_InvalidMessageState(uint8 from, uint8 to) returns()
func (_FiredrillEntrypoint *FiredrillEntrypointTransactor) DrillInvalidMessageState(opts *bind.TransactOpts, from uint8, to uint8) (*types.Transaction, error) {
	return _FiredrillEntrypoint.contract.Transact(opts, "drill_InvalidMessageState", from, to)
}

// DrillInvalidMessageState is a paid mutator transaction binding the contract method 0xfed325c2.
//
// Solidity: function drill_InvalidMessageState(uint8 from, uint8 to) returns()
func (_FiredrillEntrypoint *FiredrillEntrypointSession) DrillInvalidMessageState(from uint8, to uint8) (*types.Transaction, error) {
	return _FiredrillEntrypoint.Contract.DrillInvalidMessageState(&_FiredrillEntrypoint.TransactOpts, from, to)
}

// DrillInvalidMessageState is a paid mutator transaction binding the contract method 0xfed325c2.
//
// Solidity: function drill_InvalidMessageState(uint8 from, uint8 to) returns()
func (_FiredrillEntrypoint *FiredrillEntrypointTransactorSession) DrillInvalidMessageState(from uint8, to uint8) (*types.Transaction, error) {
	return _FiredrillEntrypoint.Contract.DrillInvalidMessageState(&_FiredrillEntrypoint.TransactOpts, from, to)
}

// DrillPendingBless is a paid mutator transaction binding the contract method 0x13bb5ad0.
//
// Solidity: function drill_PendingBless(uint8 from, uint8 to) returns()
func (_FiredrillEntrypoint *FiredrillEntrypointTransactor) DrillPendingBless(opts *bind.TransactOpts, from uint8, to uint8) (*types.Transaction, error) {
	return _FiredrillEntrypoint.contract.Transact(opts, "drill_PendingBless", from, to)
}

// DrillPendingBless is a paid mutator transaction binding the contract method 0x13bb5ad0.
//
// Solidity: function drill_PendingBless(uint8 from, uint8 to) returns()
func (_FiredrillEntrypoint *FiredrillEntrypointSession) DrillPendingBless(from uint8, to uint8) (*types.Transaction, error) {
	return _FiredrillEntrypoint.Contract.DrillPendingBless(&_FiredrillEntrypoint.TransactOpts, from, to)
}

// DrillPendingBless is a paid mutator transaction binding the contract method 0x13bb5ad0.
//
// Solidity: function drill_PendingBless(uint8 from, uint8 to) returns()
func (_FiredrillEntrypoint *FiredrillEntrypointTransactorSession) DrillPendingBless(from uint8, to uint8) (*types.Transaction, error) {
	return _FiredrillEntrypoint.Contract.DrillPendingBless(&_FiredrillEntrypoint.TransactOpts, from, to)
}

// DrillPendingCommitPendingQueueTxSpike is a paid mutator transaction binding the contract method 0x1fc9cf15.
//
// Solidity: function drill_PendingCommit_PendingQueue_TxSpike(uint8 from, uint8 to) returns()
func (_FiredrillEntrypoint *FiredrillEntrypointTransactor) DrillPendingCommitPendingQueueTxSpike(opts *bind.TransactOpts, from uint8, to uint8) (*types.Transaction, error) {
	return _FiredrillEntrypoint.contract.Transact(opts, "drill_PendingCommit_PendingQueue_TxSpike", from, to)
}

// DrillPendingCommitPendingQueueTxSpike is a paid mutator transaction binding the contract method 0x1fc9cf15.
//
// Solidity: function drill_PendingCommit_PendingQueue_TxSpike(uint8 from, uint8 to) returns()
func (_FiredrillEntrypoint *FiredrillEntrypointSession) DrillPendingCommitPendingQueueTxSpike(from uint8, to uint8) (*types.Transaction, error) {
	return _FiredrillEntrypoint.Contract.DrillPendingCommitPendingQueueTxSpike(&_FiredrillEntrypoint.TransactOpts, from, to)
}

// DrillPendingCommitPendingQueueTxSpike is a paid mutator transaction binding the contract method 0x1fc9cf15.
//
// Solidity: function drill_PendingCommit_PendingQueue_TxSpike(uint8 from, uint8 to) returns()
func (_FiredrillEntrypoint *FiredrillEntrypointTransactorSession) DrillPendingCommitPendingQueueTxSpike(from uint8, to uint8) (*types.Transaction, error) {
	return _FiredrillEntrypoint.Contract.DrillPendingCommitPendingQueueTxSpike(&_FiredrillEntrypoint.TransactOpts, from, to)
}

// DrillPendingExecution is a paid mutator transaction binding the contract method 0x8abfab01.
//
// Solidity: function drill_PendingExecution(uint8 from, uint8 to) returns()
func (_FiredrillEntrypoint *FiredrillEntrypointTransactor) DrillPendingExecution(opts *bind.TransactOpts, from uint8, to uint8) (*types.Transaction, error) {
	return _FiredrillEntrypoint.contract.Transact(opts, "drill_PendingExecution", from, to)
}

// DrillPendingExecution is a paid mutator transaction binding the contract method 0x8abfab01.
//
// Solidity: function drill_PendingExecution(uint8 from, uint8 to) returns()
func (_FiredrillEntrypoint *FiredrillEntrypointSession) DrillPendingExecution(from uint8, to uint8) (*types.Transaction, error) {
	return _FiredrillEntrypoint.Contract.DrillPendingExecution(&_FiredrillEntrypoint.TransactOpts, from, to)
}

// DrillPendingExecution is a paid mutator transaction binding the contract method 0x8abfab01.
//
// Solidity: function drill_PendingExecution(uint8 from, uint8 to) returns()
func (_FiredrillEntrypoint *FiredrillEntrypointTransactorSession) DrillPendingExecution(from uint8, to uint8) (*types.Transaction, error) {
	return _FiredrillEntrypoint.Contract.DrillPendingExecution(&_FiredrillEntrypoint.TransactOpts, from, to)
}

// DrillPriceRegistries is a paid mutator transaction binding the contract method 0xee301c16.
//
// Solidity: function drill_PriceRegistries() returns()
func (_FiredrillEntrypoint *FiredrillEntrypointTransactor) DrillPriceRegistries(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FiredrillEntrypoint.contract.Transact(opts, "drill_PriceRegistries")
}

// DrillPriceRegistries is a paid mutator transaction binding the contract method 0xee301c16.
//
// Solidity: function drill_PriceRegistries() returns()
func (_FiredrillEntrypoint *FiredrillEntrypointSession) DrillPriceRegistries() (*types.Transaction, error) {
	return _FiredrillEntrypoint.Contract.DrillPriceRegistries(&_FiredrillEntrypoint.TransactOpts)
}

// DrillPriceRegistries is a paid mutator transaction binding the contract method 0xee301c16.
//
// Solidity: function drill_PriceRegistries() returns()
func (_FiredrillEntrypoint *FiredrillEntrypointTransactorSession) DrillPriceRegistries() (*types.Transaction, error) {
	return _FiredrillEntrypoint.Contract.DrillPriceRegistries(&_FiredrillEntrypoint.TransactOpts)
}

// DrillPrivilegedFunctionCalled is a paid mutator transaction binding the contract method 0xc608d674.
//
// Solidity: function drill_PrivilegedFunctionCalled() returns()
func (_FiredrillEntrypoint *FiredrillEntrypointTransactor) DrillPrivilegedFunctionCalled(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FiredrillEntrypoint.contract.Transact(opts, "drill_PrivilegedFunctionCalled")
}

// DrillPrivilegedFunctionCalled is a paid mutator transaction binding the contract method 0xc608d674.
//
// Solidity: function drill_PrivilegedFunctionCalled() returns()
func (_FiredrillEntrypoint *FiredrillEntrypointSession) DrillPrivilegedFunctionCalled() (*types.Transaction, error) {
	return _FiredrillEntrypoint.Contract.DrillPrivilegedFunctionCalled(&_FiredrillEntrypoint.TransactOpts)
}

// DrillPrivilegedFunctionCalled is a paid mutator transaction binding the contract method 0xc608d674.
//
// Solidity: function drill_PrivilegedFunctionCalled() returns()
func (_FiredrillEntrypoint *FiredrillEntrypointTransactorSession) DrillPrivilegedFunctionCalled() (*types.Transaction, error) {
	return _FiredrillEntrypoint.Contract.DrillPrivilegedFunctionCalled(&_FiredrillEntrypoint.TransactOpts)
}

// DrillRmnCurse is a paid mutator transaction binding the contract method 0xf9d8a517.
//
// Solidity: function drill_RmnCurse() returns()
func (_FiredrillEntrypoint *FiredrillEntrypointTransactor) DrillRmnCurse(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FiredrillEntrypoint.contract.Transact(opts, "drill_RmnCurse")
}

// DrillRmnCurse is a paid mutator transaction binding the contract method 0xf9d8a517.
//
// Solidity: function drill_RmnCurse() returns()
func (_FiredrillEntrypoint *FiredrillEntrypointSession) DrillRmnCurse() (*types.Transaction, error) {
	return _FiredrillEntrypoint.Contract.DrillRmnCurse(&_FiredrillEntrypoint.TransactOpts)
}

// DrillRmnCurse is a paid mutator transaction binding the contract method 0xf9d8a517.
//
// Solidity: function drill_RmnCurse() returns()
func (_FiredrillEntrypoint *FiredrillEntrypointTransactorSession) DrillRmnCurse() (*types.Transaction, error) {
	return _FiredrillEntrypoint.Contract.DrillRmnCurse(&_FiredrillEntrypoint.TransactOpts)
}

// DrillRmnVotedToCurse is a paid mutator transaction binding the contract method 0x6415175a.
//
// Solidity: function drill_RmnVotedToCurse() returns()
func (_FiredrillEntrypoint *FiredrillEntrypointTransactor) DrillRmnVotedToCurse(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FiredrillEntrypoint.contract.Transact(opts, "drill_RmnVotedToCurse")
}

// DrillRmnVotedToCurse is a paid mutator transaction binding the contract method 0x6415175a.
//
// Solidity: function drill_RmnVotedToCurse() returns()
func (_FiredrillEntrypoint *FiredrillEntrypointSession) DrillRmnVotedToCurse() (*types.Transaction, error) {
	return _FiredrillEntrypoint.Contract.DrillRmnVotedToCurse(&_FiredrillEntrypoint.TransactOpts)
}

// DrillRmnVotedToCurse is a paid mutator transaction binding the contract method 0x6415175a.
//
// Solidity: function drill_RmnVotedToCurse() returns()
func (_FiredrillEntrypoint *FiredrillEntrypointTransactorSession) DrillRmnVotedToCurse() (*types.Transaction, error) {
	return _FiredrillEntrypoint.Contract.DrillRmnVotedToCurse(&_FiredrillEntrypoint.TransactOpts)
}

// DrillTokenPoolRateLimitInbound is a paid mutator transaction binding the contract method 0x0abaa60d.
//
// Solidity: function drill_TokenPoolRateLimit_Inbound() returns()
func (_FiredrillEntrypoint *FiredrillEntrypointTransactor) DrillTokenPoolRateLimitInbound(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FiredrillEntrypoint.contract.Transact(opts, "drill_TokenPoolRateLimit_Inbound")
}

// DrillTokenPoolRateLimitInbound is a paid mutator transaction binding the contract method 0x0abaa60d.
//
// Solidity: function drill_TokenPoolRateLimit_Inbound() returns()
func (_FiredrillEntrypoint *FiredrillEntrypointSession) DrillTokenPoolRateLimitInbound() (*types.Transaction, error) {
	return _FiredrillEntrypoint.Contract.DrillTokenPoolRateLimitInbound(&_FiredrillEntrypoint.TransactOpts)
}

// DrillTokenPoolRateLimitInbound is a paid mutator transaction binding the contract method 0x0abaa60d.
//
// Solidity: function drill_TokenPoolRateLimit_Inbound() returns()
func (_FiredrillEntrypoint *FiredrillEntrypointTransactorSession) DrillTokenPoolRateLimitInbound() (*types.Transaction, error) {
	return _FiredrillEntrypoint.Contract.DrillTokenPoolRateLimitInbound(&_FiredrillEntrypoint.TransactOpts)
}

// DrillTokenPoolRateLimitOfframp is a paid mutator transaction binding the contract method 0xda008fc5.
//
// Solidity: function drill_TokenPoolRateLimit_Offramp() returns()
func (_FiredrillEntrypoint *FiredrillEntrypointTransactor) DrillTokenPoolRateLimitOfframp(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FiredrillEntrypoint.contract.Transact(opts, "drill_TokenPoolRateLimit_Offramp")
}

// DrillTokenPoolRateLimitOfframp is a paid mutator transaction binding the contract method 0xda008fc5.
//
// Solidity: function drill_TokenPoolRateLimit_Offramp() returns()
func (_FiredrillEntrypoint *FiredrillEntrypointSession) DrillTokenPoolRateLimitOfframp() (*types.Transaction, error) {
	return _FiredrillEntrypoint.Contract.DrillTokenPoolRateLimitOfframp(&_FiredrillEntrypoint.TransactOpts)
}

// DrillTokenPoolRateLimitOfframp is a paid mutator transaction binding the contract method 0xda008fc5.
//
// Solidity: function drill_TokenPoolRateLimit_Offramp() returns()
func (_FiredrillEntrypoint *FiredrillEntrypointTransactorSession) DrillTokenPoolRateLimitOfframp() (*types.Transaction, error) {
	return _FiredrillEntrypoint.Contract.DrillTokenPoolRateLimitOfframp(&_FiredrillEntrypoint.TransactOpts)
}

// EmitCursed is a paid mutator transaction binding the contract method 0xd7080f09.
//
// Solidity: function emitCursed() returns()
func (_FiredrillEntrypoint *FiredrillEntrypointTransactor) EmitCursed(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FiredrillEntrypoint.contract.Transact(opts, "emitCursed")
}

// EmitCursed is a paid mutator transaction binding the contract method 0xd7080f09.
//
// Solidity: function emitCursed() returns()
func (_FiredrillEntrypoint *FiredrillEntrypointSession) EmitCursed() (*types.Transaction, error) {
	return _FiredrillEntrypoint.Contract.EmitCursed(&_FiredrillEntrypoint.TransactOpts)
}

// EmitCursed is a paid mutator transaction binding the contract method 0xd7080f09.
//
// Solidity: function emitCursed() returns()
func (_FiredrillEntrypoint *FiredrillEntrypointTransactorSession) EmitCursed() (*types.Transaction, error) {
	return _FiredrillEntrypoint.Contract.EmitCursed(&_FiredrillEntrypoint.TransactOpts)
}

// EmitReleased is a paid mutator transaction binding the contract method 0xf5de8527.
//
// Solidity: function emitReleased() returns()
func (_FiredrillEntrypoint *FiredrillEntrypointTransactor) EmitReleased(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FiredrillEntrypoint.contract.Transact(opts, "emitReleased")
}

// EmitReleased is a paid mutator transaction binding the contract method 0xf5de8527.
//
// Solidity: function emitReleased() returns()
func (_FiredrillEntrypoint *FiredrillEntrypointSession) EmitReleased() (*types.Transaction, error) {
	return _FiredrillEntrypoint.Contract.EmitReleased(&_FiredrillEntrypoint.TransactOpts)
}

// EmitReleased is a paid mutator transaction binding the contract method 0xf5de8527.
//
// Solidity: function emitReleased() returns()
func (_FiredrillEntrypoint *FiredrillEntrypointTransactorSession) EmitReleased() (*types.Transaction, error) {
	return _FiredrillEntrypoint.Contract.EmitReleased(&_FiredrillEntrypoint.TransactOpts)
}

// EmitTagRootBlessed is a paid mutator transaction binding the contract method 0x43d24152.
//
// Solidity: function emitTagRootBlessed(uint64 minSeqNr, uint64 maxSeqNr) returns()
func (_FiredrillEntrypoint *FiredrillEntrypointTransactor) EmitTagRootBlessed(opts *bind.TransactOpts, minSeqNr uint64, maxSeqNr uint64) (*types.Transaction, error) {
	return _FiredrillEntrypoint.contract.Transact(opts, "emitTagRootBlessed", minSeqNr, maxSeqNr)
}

// EmitTagRootBlessed is a paid mutator transaction binding the contract method 0x43d24152.
//
// Solidity: function emitTagRootBlessed(uint64 minSeqNr, uint64 maxSeqNr) returns()
func (_FiredrillEntrypoint *FiredrillEntrypointSession) EmitTagRootBlessed(minSeqNr uint64, maxSeqNr uint64) (*types.Transaction, error) {
	return _FiredrillEntrypoint.Contract.EmitTagRootBlessed(&_FiredrillEntrypoint.TransactOpts, minSeqNr, maxSeqNr)
}

// EmitTagRootBlessed is a paid mutator transaction binding the contract method 0x43d24152.
//
// Solidity: function emitTagRootBlessed(uint64 minSeqNr, uint64 maxSeqNr) returns()
func (_FiredrillEntrypoint *FiredrillEntrypointTransactorSession) EmitTagRootBlessed(minSeqNr uint64, maxSeqNr uint64) (*types.Transaction, error) {
	return _FiredrillEntrypoint.Contract.EmitTagRootBlessed(&_FiredrillEntrypoint.TransactOpts, minSeqNr, maxSeqNr)
}

// EmitUsdPerTokenUpdated is a paid mutator transaction binding the contract method 0x20f938b6.
//
// Solidity: function emitUsdPerTokenUpdated() returns()
func (_FiredrillEntrypoint *FiredrillEntrypointTransactor) EmitUsdPerTokenUpdated(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FiredrillEntrypoint.contract.Transact(opts, "emitUsdPerTokenUpdated")
}

// EmitUsdPerTokenUpdated is a paid mutator transaction binding the contract method 0x20f938b6.
//
// Solidity: function emitUsdPerTokenUpdated() returns()
func (_FiredrillEntrypoint *FiredrillEntrypointSession) EmitUsdPerTokenUpdated() (*types.Transaction, error) {
	return _FiredrillEntrypoint.Contract.EmitUsdPerTokenUpdated(&_FiredrillEntrypoint.TransactOpts)
}

// EmitUsdPerTokenUpdated is a paid mutator transaction binding the contract method 0x20f938b6.
//
// Solidity: function emitUsdPerTokenUpdated() returns()
func (_FiredrillEntrypoint *FiredrillEntrypointTransactorSession) EmitUsdPerTokenUpdated() (*types.Transaction, error) {
	return _FiredrillEntrypoint.Contract.EmitUsdPerTokenUpdated(&_FiredrillEntrypoint.TransactOpts)
}

// EmitVotedToCurse is a paid mutator transaction binding the contract method 0x384b09e8.
//
// Solidity: function emitVotedToCurse() returns()
func (_FiredrillEntrypoint *FiredrillEntrypointTransactor) EmitVotedToCurse(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FiredrillEntrypoint.contract.Transact(opts, "emitVotedToCurse")
}

// EmitVotedToCurse is a paid mutator transaction binding the contract method 0x384b09e8.
//
// Solidity: function emitVotedToCurse() returns()
func (_FiredrillEntrypoint *FiredrillEntrypointSession) EmitVotedToCurse() (*types.Transaction, error) {
	return _FiredrillEntrypoint.Contract.EmitVotedToCurse(&_FiredrillEntrypoint.TransactOpts)
}

// EmitVotedToCurse is a paid mutator transaction binding the contract method 0x384b09e8.
//
// Solidity: function emitVotedToCurse() returns()
func (_FiredrillEntrypoint *FiredrillEntrypointTransactorSession) EmitVotedToCurse() (*types.Transaction, error) {
	return _FiredrillEntrypoint.Contract.EmitVotedToCurse(&_FiredrillEntrypoint.TransactOpts)
}

// PrepareRegister is a paid mutator transaction binding the contract method 0xe311a009.
//
// Solidity: function prepare_Register() returns()
func (_FiredrillEntrypoint *FiredrillEntrypointTransactor) PrepareRegister(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FiredrillEntrypoint.contract.Transact(opts, "prepare_Register")
}

// PrepareRegister is a paid mutator transaction binding the contract method 0xe311a009.
//
// Solidity: function prepare_Register() returns()
func (_FiredrillEntrypoint *FiredrillEntrypointSession) PrepareRegister() (*types.Transaction, error) {
	return _FiredrillEntrypoint.Contract.PrepareRegister(&_FiredrillEntrypoint.TransactOpts)
}

// PrepareRegister is a paid mutator transaction binding the contract method 0xe311a009.
//
// Solidity: function prepare_Register() returns()
func (_FiredrillEntrypoint *FiredrillEntrypointTransactorSession) PrepareRegister() (*types.Transaction, error) {
	return _FiredrillEntrypoint.Contract.PrepareRegister(&_FiredrillEntrypoint.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_FiredrillEntrypoint *FiredrillEntrypointTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FiredrillEntrypoint.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_FiredrillEntrypoint *FiredrillEntrypointSession) RenounceOwnership() (*types.Transaction, error) {
	return _FiredrillEntrypoint.Contract.RenounceOwnership(&_FiredrillEntrypoint.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_FiredrillEntrypoint *FiredrillEntrypointTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _FiredrillEntrypoint.Contract.RenounceOwnership(&_FiredrillEntrypoint.TransactOpts)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_FiredrillEntrypoint *FiredrillEntrypointTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _FiredrillEntrypoint.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_FiredrillEntrypoint *FiredrillEntrypointSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _FiredrillEntrypoint.Contract.TransferOwnership(&_FiredrillEntrypoint.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_FiredrillEntrypoint *FiredrillEntrypointTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _FiredrillEntrypoint.Contract.TransferOwnership(&_FiredrillEntrypoint.TransactOpts, newOwner)
}

// FiredrillEntrypointCursedIterator is returned from FilterCursed and is used to iterate over the raw logs and unpacked data for Cursed events raised by the FiredrillEntrypoint contract.
type FiredrillEntrypointCursedIterator struct {
	Event *FiredrillEntrypointCursed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FiredrillEntrypointCursedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FiredrillEntrypointCursed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FiredrillEntrypointCursed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FiredrillEntrypointCursedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FiredrillEntrypointCursedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FiredrillEntrypointCursed represents a Cursed event raised by the FiredrillEntrypoint contract.
type FiredrillEntrypointCursed struct {
	ConfigVersion  uint32
	Subject        [16]byte
	BlockTimestamp uint64
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterCursed is a free log retrieval operation binding the contract event 0xcfdbfd8ce9a56b5f7c202c0e102184d24f47ca87121dc165063fc4c290957bde.
//
// Solidity: event Cursed(uint32 indexed configVersion, bytes16 subject, uint64 blockTimestamp)
func (_FiredrillEntrypoint *FiredrillEntrypointFilterer) FilterCursed(opts *bind.FilterOpts, configVersion []uint32) (*FiredrillEntrypointCursedIterator, error) {

	var configVersionRule []interface{}
	for _, configVersionItem := range configVersion {
		configVersionRule = append(configVersionRule, configVersionItem)
	}

	logs, sub, err := _FiredrillEntrypoint.contract.FilterLogs(opts, "Cursed", configVersionRule)
	if err != nil {
		return nil, err
	}
	return &FiredrillEntrypointCursedIterator{contract: _FiredrillEntrypoint.contract, event: "Cursed", logs: logs, sub: sub}, nil
}

// WatchCursed is a free log subscription operation binding the contract event 0xcfdbfd8ce9a56b5f7c202c0e102184d24f47ca87121dc165063fc4c290957bde.
//
// Solidity: event Cursed(uint32 indexed configVersion, bytes16 subject, uint64 blockTimestamp)
func (_FiredrillEntrypoint *FiredrillEntrypointFilterer) WatchCursed(opts *bind.WatchOpts, sink chan<- *FiredrillEntrypointCursed, configVersion []uint32) (event.Subscription, error) {

	var configVersionRule []interface{}
	for _, configVersionItem := range configVersion {
		configVersionRule = append(configVersionRule, configVersionItem)
	}

	logs, sub, err := _FiredrillEntrypoint.contract.WatchLogs(opts, "Cursed", configVersionRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FiredrillEntrypointCursed)
				if err := _FiredrillEntrypoint.contract.UnpackLog(event, "Cursed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCursed is a log parse operation binding the contract event 0xcfdbfd8ce9a56b5f7c202c0e102184d24f47ca87121dc165063fc4c290957bde.
//
// Solidity: event Cursed(uint32 indexed configVersion, bytes16 subject, uint64 blockTimestamp)
func (_FiredrillEntrypoint *FiredrillEntrypointFilterer) ParseCursed(log types.Log) (*FiredrillEntrypointCursed, error) {
	event := new(FiredrillEntrypointCursed)
	if err := _FiredrillEntrypoint.contract.UnpackLog(event, "Cursed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FiredrillEntrypointOwnershipTransferStartedIterator is returned from FilterOwnershipTransferStarted and is used to iterate over the raw logs and unpacked data for OwnershipTransferStarted events raised by the FiredrillEntrypoint contract.
type FiredrillEntrypointOwnershipTransferStartedIterator struct {
	Event *FiredrillEntrypointOwnershipTransferStarted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FiredrillEntrypointOwnershipTransferStartedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FiredrillEntrypointOwnershipTransferStarted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FiredrillEntrypointOwnershipTransferStarted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FiredrillEntrypointOwnershipTransferStartedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FiredrillEntrypointOwnershipTransferStartedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FiredrillEntrypointOwnershipTransferStarted represents a OwnershipTransferStarted event raised by the FiredrillEntrypoint contract.
type FiredrillEntrypointOwnershipTransferStarted struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferStarted is a free log retrieval operation binding the contract event 0x38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e22700.
//
// Solidity: event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner)
func (_FiredrillEntrypoint *FiredrillEntrypointFilterer) FilterOwnershipTransferStarted(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*FiredrillEntrypointOwnershipTransferStartedIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _FiredrillEntrypoint.contract.FilterLogs(opts, "OwnershipTransferStarted", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &FiredrillEntrypointOwnershipTransferStartedIterator{contract: _FiredrillEntrypoint.contract, event: "OwnershipTransferStarted", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferStarted is a free log subscription operation binding the contract event 0x38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e22700.
//
// Solidity: event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner)
func (_FiredrillEntrypoint *FiredrillEntrypointFilterer) WatchOwnershipTransferStarted(opts *bind.WatchOpts, sink chan<- *FiredrillEntrypointOwnershipTransferStarted, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _FiredrillEntrypoint.contract.WatchLogs(opts, "OwnershipTransferStarted", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FiredrillEntrypointOwnershipTransferStarted)
				if err := _FiredrillEntrypoint.contract.UnpackLog(event, "OwnershipTransferStarted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferStarted is a log parse operation binding the contract event 0x38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e22700.
//
// Solidity: event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner)
func (_FiredrillEntrypoint *FiredrillEntrypointFilterer) ParseOwnershipTransferStarted(log types.Log) (*FiredrillEntrypointOwnershipTransferStarted, error) {
	event := new(FiredrillEntrypointOwnershipTransferStarted)
	if err := _FiredrillEntrypoint.contract.UnpackLog(event, "OwnershipTransferStarted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FiredrillEntrypointOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the FiredrillEntrypoint contract.
type FiredrillEntrypointOwnershipTransferredIterator struct {
	Event *FiredrillEntrypointOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FiredrillEntrypointOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FiredrillEntrypointOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FiredrillEntrypointOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FiredrillEntrypointOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FiredrillEntrypointOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FiredrillEntrypointOwnershipTransferred represents a OwnershipTransferred event raised by the FiredrillEntrypoint contract.
type FiredrillEntrypointOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_FiredrillEntrypoint *FiredrillEntrypointFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*FiredrillEntrypointOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _FiredrillEntrypoint.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &FiredrillEntrypointOwnershipTransferredIterator{contract: _FiredrillEntrypoint.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_FiredrillEntrypoint *FiredrillEntrypointFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *FiredrillEntrypointOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _FiredrillEntrypoint.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FiredrillEntrypointOwnershipTransferred)
				if err := _FiredrillEntrypoint.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_FiredrillEntrypoint *FiredrillEntrypointFilterer) ParseOwnershipTransferred(log types.Log) (*FiredrillEntrypointOwnershipTransferred, error) {
	event := new(FiredrillEntrypointOwnershipTransferred)
	if err := _FiredrillEntrypoint.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FiredrillEntrypointReleasedIterator is returned from FilterReleased and is used to iterate over the raw logs and unpacked data for Released events raised by the FiredrillEntrypoint contract.
type FiredrillEntrypointReleasedIterator struct {
	Event *FiredrillEntrypointReleased // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FiredrillEntrypointReleasedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FiredrillEntrypointReleased)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FiredrillEntrypointReleased)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FiredrillEntrypointReleasedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FiredrillEntrypointReleasedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FiredrillEntrypointReleased represents a Released event raised by the FiredrillEntrypoint contract.
type FiredrillEntrypointReleased struct {
	Sender    common.Address
	Recipient common.Address
	Amount    *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterReleased is a free log retrieval operation binding the contract event 0x2d87480f50083e2b2759522a8fdda59802650a8055e609a7772cf70c07748f52.
//
// Solidity: event Released(address indexed sender, address indexed recipient, uint256 amount)
func (_FiredrillEntrypoint *FiredrillEntrypointFilterer) FilterReleased(opts *bind.FilterOpts, sender []common.Address, recipient []common.Address) (*FiredrillEntrypointReleasedIterator, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}
	var recipientRule []interface{}
	for _, recipientItem := range recipient {
		recipientRule = append(recipientRule, recipientItem)
	}

	logs, sub, err := _FiredrillEntrypoint.contract.FilterLogs(opts, "Released", senderRule, recipientRule)
	if err != nil {
		return nil, err
	}
	return &FiredrillEntrypointReleasedIterator{contract: _FiredrillEntrypoint.contract, event: "Released", logs: logs, sub: sub}, nil
}

// WatchReleased is a free log subscription operation binding the contract event 0x2d87480f50083e2b2759522a8fdda59802650a8055e609a7772cf70c07748f52.
//
// Solidity: event Released(address indexed sender, address indexed recipient, uint256 amount)
func (_FiredrillEntrypoint *FiredrillEntrypointFilterer) WatchReleased(opts *bind.WatchOpts, sink chan<- *FiredrillEntrypointReleased, sender []common.Address, recipient []common.Address) (event.Subscription, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}
	var recipientRule []interface{}
	for _, recipientItem := range recipient {
		recipientRule = append(recipientRule, recipientItem)
	}

	logs, sub, err := _FiredrillEntrypoint.contract.WatchLogs(opts, "Released", senderRule, recipientRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FiredrillEntrypointReleased)
				if err := _FiredrillEntrypoint.contract.UnpackLog(event, "Released", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseReleased is a log parse operation binding the contract event 0x2d87480f50083e2b2759522a8fdda59802650a8055e609a7772cf70c07748f52.
//
// Solidity: event Released(address indexed sender, address indexed recipient, uint256 amount)
func (_FiredrillEntrypoint *FiredrillEntrypointFilterer) ParseReleased(log types.Log) (*FiredrillEntrypointReleased, error) {
	event := new(FiredrillEntrypointReleased)
	if err := _FiredrillEntrypoint.contract.UnpackLog(event, "Released", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FiredrillEntrypointTaggedRootBlessedIterator is returned from FilterTaggedRootBlessed and is used to iterate over the raw logs and unpacked data for TaggedRootBlessed events raised by the FiredrillEntrypoint contract.
type FiredrillEntrypointTaggedRootBlessedIterator struct {
	Event *FiredrillEntrypointTaggedRootBlessed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FiredrillEntrypointTaggedRootBlessedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FiredrillEntrypointTaggedRootBlessed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FiredrillEntrypointTaggedRootBlessed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FiredrillEntrypointTaggedRootBlessedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FiredrillEntrypointTaggedRootBlessedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FiredrillEntrypointTaggedRootBlessed represents a TaggedRootBlessed event raised by the FiredrillEntrypoint contract.
type FiredrillEntrypointTaggedRootBlessed struct {
	ConfigVersion     uint32
	TaggedRoot        FiredrillCompoundTaggedRoot
	AccumulatedWeight uint16
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterTaggedRootBlessed is a free log retrieval operation binding the contract event 0x8257378aa73bf8e4ada848713526584a3dcee0fd3db3beed7397f7a7f5067cc9.
//
// Solidity: event TaggedRootBlessed(uint32 indexed configVersion, (address,bytes32) taggedRoot, uint16 accumulatedWeight)
func (_FiredrillEntrypoint *FiredrillEntrypointFilterer) FilterTaggedRootBlessed(opts *bind.FilterOpts, configVersion []uint32) (*FiredrillEntrypointTaggedRootBlessedIterator, error) {

	var configVersionRule []interface{}
	for _, configVersionItem := range configVersion {
		configVersionRule = append(configVersionRule, configVersionItem)
	}

	logs, sub, err := _FiredrillEntrypoint.contract.FilterLogs(opts, "TaggedRootBlessed", configVersionRule)
	if err != nil {
		return nil, err
	}
	return &FiredrillEntrypointTaggedRootBlessedIterator{contract: _FiredrillEntrypoint.contract, event: "TaggedRootBlessed", logs: logs, sub: sub}, nil
}

// WatchTaggedRootBlessed is a free log subscription operation binding the contract event 0x8257378aa73bf8e4ada848713526584a3dcee0fd3db3beed7397f7a7f5067cc9.
//
// Solidity: event TaggedRootBlessed(uint32 indexed configVersion, (address,bytes32) taggedRoot, uint16 accumulatedWeight)
func (_FiredrillEntrypoint *FiredrillEntrypointFilterer) WatchTaggedRootBlessed(opts *bind.WatchOpts, sink chan<- *FiredrillEntrypointTaggedRootBlessed, configVersion []uint32) (event.Subscription, error) {

	var configVersionRule []interface{}
	for _, configVersionItem := range configVersion {
		configVersionRule = append(configVersionRule, configVersionItem)
	}

	logs, sub, err := _FiredrillEntrypoint.contract.WatchLogs(opts, "TaggedRootBlessed", configVersionRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FiredrillEntrypointTaggedRootBlessed)
				if err := _FiredrillEntrypoint.contract.UnpackLog(event, "TaggedRootBlessed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTaggedRootBlessed is a log parse operation binding the contract event 0x8257378aa73bf8e4ada848713526584a3dcee0fd3db3beed7397f7a7f5067cc9.
//
// Solidity: event TaggedRootBlessed(uint32 indexed configVersion, (address,bytes32) taggedRoot, uint16 accumulatedWeight)
func (_FiredrillEntrypoint *FiredrillEntrypointFilterer) ParseTaggedRootBlessed(log types.Log) (*FiredrillEntrypointTaggedRootBlessed, error) {
	event := new(FiredrillEntrypointTaggedRootBlessed)
	if err := _FiredrillEntrypoint.contract.UnpackLog(event, "TaggedRootBlessed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FiredrillEntrypointUsdPerTokenUpdatedIterator is returned from FilterUsdPerTokenUpdated and is used to iterate over the raw logs and unpacked data for UsdPerTokenUpdated events raised by the FiredrillEntrypoint contract.
type FiredrillEntrypointUsdPerTokenUpdatedIterator struct {
	Event *FiredrillEntrypointUsdPerTokenUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FiredrillEntrypointUsdPerTokenUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FiredrillEntrypointUsdPerTokenUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FiredrillEntrypointUsdPerTokenUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FiredrillEntrypointUsdPerTokenUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FiredrillEntrypointUsdPerTokenUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FiredrillEntrypointUsdPerTokenUpdated represents a UsdPerTokenUpdated event raised by the FiredrillEntrypoint contract.
type FiredrillEntrypointUsdPerTokenUpdated struct {
	Token     common.Address
	Value     *big.Int
	Timestamp *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterUsdPerTokenUpdated is a free log retrieval operation binding the contract event 0x52f50aa6d1a95a4595361ecf953d095f125d442e4673716dede699e049de148a.
//
// Solidity: event UsdPerTokenUpdated(address indexed token, uint256 value, uint256 timestamp)
func (_FiredrillEntrypoint *FiredrillEntrypointFilterer) FilterUsdPerTokenUpdated(opts *bind.FilterOpts, token []common.Address) (*FiredrillEntrypointUsdPerTokenUpdatedIterator, error) {

	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _FiredrillEntrypoint.contract.FilterLogs(opts, "UsdPerTokenUpdated", tokenRule)
	if err != nil {
		return nil, err
	}
	return &FiredrillEntrypointUsdPerTokenUpdatedIterator{contract: _FiredrillEntrypoint.contract, event: "UsdPerTokenUpdated", logs: logs, sub: sub}, nil
}

// WatchUsdPerTokenUpdated is a free log subscription operation binding the contract event 0x52f50aa6d1a95a4595361ecf953d095f125d442e4673716dede699e049de148a.
//
// Solidity: event UsdPerTokenUpdated(address indexed token, uint256 value, uint256 timestamp)
func (_FiredrillEntrypoint *FiredrillEntrypointFilterer) WatchUsdPerTokenUpdated(opts *bind.WatchOpts, sink chan<- *FiredrillEntrypointUsdPerTokenUpdated, token []common.Address) (event.Subscription, error) {

	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _FiredrillEntrypoint.contract.WatchLogs(opts, "UsdPerTokenUpdated", tokenRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FiredrillEntrypointUsdPerTokenUpdated)
				if err := _FiredrillEntrypoint.contract.UnpackLog(event, "UsdPerTokenUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUsdPerTokenUpdated is a log parse operation binding the contract event 0x52f50aa6d1a95a4595361ecf953d095f125d442e4673716dede699e049de148a.
//
// Solidity: event UsdPerTokenUpdated(address indexed token, uint256 value, uint256 timestamp)
func (_FiredrillEntrypoint *FiredrillEntrypointFilterer) ParseUsdPerTokenUpdated(log types.Log) (*FiredrillEntrypointUsdPerTokenUpdated, error) {
	event := new(FiredrillEntrypointUsdPerTokenUpdated)
	if err := _FiredrillEntrypoint.contract.UnpackLog(event, "UsdPerTokenUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FiredrillEntrypointVotedToCurseIterator is returned from FilterVotedToCurse and is used to iterate over the raw logs and unpacked data for VotedToCurse events raised by the FiredrillEntrypoint contract.
type FiredrillEntrypointVotedToCurseIterator struct {
	Event *FiredrillEntrypointVotedToCurse // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FiredrillEntrypointVotedToCurseIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FiredrillEntrypointVotedToCurse)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FiredrillEntrypointVotedToCurse)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FiredrillEntrypointVotedToCurseIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FiredrillEntrypointVotedToCurseIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FiredrillEntrypointVotedToCurse represents a VotedToCurse event raised by the FiredrillEntrypoint contract.
type FiredrillEntrypointVotedToCurse struct {
	ConfigVersion     uint32
	Voter             common.Address
	Subject           [16]byte
	CurseId           [16]byte
	Weight            uint8
	BlockTimestamp    uint64
	CursesHash        [28]byte
	AccumulatedWeight uint16
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterVotedToCurse is a free log retrieval operation binding the contract event 0x8137bc8a8d712aaa27bfc6506d5566ac405618bd53f9831b8ca6b6fe5442ee7a.
//
// Solidity: event VotedToCurse(uint32 indexed configVersion, address indexed voter, bytes16 subject, bytes16 curseId, uint8 weight, uint64 blockTimestamp, bytes28 cursesHash, uint16 accumulatedWeight)
func (_FiredrillEntrypoint *FiredrillEntrypointFilterer) FilterVotedToCurse(opts *bind.FilterOpts, configVersion []uint32, voter []common.Address) (*FiredrillEntrypointVotedToCurseIterator, error) {

	var configVersionRule []interface{}
	for _, configVersionItem := range configVersion {
		configVersionRule = append(configVersionRule, configVersionItem)
	}
	var voterRule []interface{}
	for _, voterItem := range voter {
		voterRule = append(voterRule, voterItem)
	}

	logs, sub, err := _FiredrillEntrypoint.contract.FilterLogs(opts, "VotedToCurse", configVersionRule, voterRule)
	if err != nil {
		return nil, err
	}
	return &FiredrillEntrypointVotedToCurseIterator{contract: _FiredrillEntrypoint.contract, event: "VotedToCurse", logs: logs, sub: sub}, nil
}

// WatchVotedToCurse is a free log subscription operation binding the contract event 0x8137bc8a8d712aaa27bfc6506d5566ac405618bd53f9831b8ca6b6fe5442ee7a.
//
// Solidity: event VotedToCurse(uint32 indexed configVersion, address indexed voter, bytes16 subject, bytes16 curseId, uint8 weight, uint64 blockTimestamp, bytes28 cursesHash, uint16 accumulatedWeight)
func (_FiredrillEntrypoint *FiredrillEntrypointFilterer) WatchVotedToCurse(opts *bind.WatchOpts, sink chan<- *FiredrillEntrypointVotedToCurse, configVersion []uint32, voter []common.Address) (event.Subscription, error) {

	var configVersionRule []interface{}
	for _, configVersionItem := range configVersion {
		configVersionRule = append(configVersionRule, configVersionItem)
	}
	var voterRule []interface{}
	for _, voterItem := range voter {
		voterRule = append(voterRule, voterItem)
	}

	logs, sub, err := _FiredrillEntrypoint.contract.WatchLogs(opts, "VotedToCurse", configVersionRule, voterRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FiredrillEntrypointVotedToCurse)
				if err := _FiredrillEntrypoint.contract.UnpackLog(event, "VotedToCurse", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVotedToCurse is a log parse operation binding the contract event 0x8137bc8a8d712aaa27bfc6506d5566ac405618bd53f9831b8ca6b6fe5442ee7a.
//
// Solidity: event VotedToCurse(uint32 indexed configVersion, address indexed voter, bytes16 subject, bytes16 curseId, uint8 weight, uint64 blockTimestamp, bytes28 cursesHash, uint16 accumulatedWeight)
func (_FiredrillEntrypoint *FiredrillEntrypointFilterer) ParseVotedToCurse(log types.Log) (*FiredrillEntrypointVotedToCurse, error) {
	event := new(FiredrillEntrypointVotedToCurse)
	if err := _FiredrillEntrypoint.contract.UnpackLog(event, "VotedToCurse", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
