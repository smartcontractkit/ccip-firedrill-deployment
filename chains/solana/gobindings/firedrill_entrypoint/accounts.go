// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package firedrill_entrypoint

import (
	"fmt"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type FiredrillEntrypoint struct {
	Owner         ag_solanago.PublicKey
	ChainSelector uint64
	Token         ag_solanago.PublicKey
	OffRamp       ag_solanago.PublicKey
	FeeQuoter     ag_solanago.PublicKey
	Compound      ag_solanago.PublicKey
	Receiver      ag_solanago.PublicKey
	SendLast      uint8
}

var FiredrillEntrypointDiscriminator = [8]byte{87, 130, 86, 138, 156, 18, 221, 67}

func (obj FiredrillEntrypoint) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(FiredrillEntrypointDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Owner` param:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return err
	}
	// Serialize `ChainSelector` param:
	err = encoder.Encode(obj.ChainSelector)
	if err != nil {
		return err
	}
	// Serialize `Token` param:
	err = encoder.Encode(obj.Token)
	if err != nil {
		return err
	}
	// Serialize `OffRamp` param:
	err = encoder.Encode(obj.OffRamp)
	if err != nil {
		return err
	}
	// Serialize `FeeQuoter` param:
	err = encoder.Encode(obj.FeeQuoter)
	if err != nil {
		return err
	}
	// Serialize `Compound` param:
	err = encoder.Encode(obj.Compound)
	if err != nil {
		return err
	}
	// Serialize `Receiver` param:
	err = encoder.Encode(obj.Receiver)
	if err != nil {
		return err
	}
	// Serialize `SendLast` param:
	err = encoder.Encode(obj.SendLast)
	if err != nil {
		return err
	}
	return nil
}

func (obj *FiredrillEntrypoint) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(FiredrillEntrypointDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[87 130 86 138 156 18 221 67]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return err
	}
	// Deserialize `ChainSelector`:
	err = decoder.Decode(&obj.ChainSelector)
	if err != nil {
		return err
	}
	// Deserialize `Token`:
	err = decoder.Decode(&obj.Token)
	if err != nil {
		return err
	}
	// Deserialize `OffRamp`:
	err = decoder.Decode(&obj.OffRamp)
	if err != nil {
		return err
	}
	// Deserialize `FeeQuoter`:
	err = decoder.Decode(&obj.FeeQuoter)
	if err != nil {
		return err
	}
	// Deserialize `Compound`:
	err = decoder.Decode(&obj.Compound)
	if err != nil {
		return err
	}
	// Deserialize `Receiver`:
	err = decoder.Decode(&obj.Receiver)
	if err != nil {
		return err
	}
	// Deserialize `SendLast`:
	err = decoder.Decode(&obj.SendLast)
	if err != nil {
		return err
	}
	return nil
}
