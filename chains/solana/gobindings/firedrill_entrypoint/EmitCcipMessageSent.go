// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package firedrill_entrypoint

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// EmitCcipMessageSent is the `emitCcipMessageSent` instruction.
type EmitCcipMessageSent struct {
	Sender *ag_solanago.PublicKey
	Index  *uint64

	// [0] = [WRITE] entrypoint
	//
	// [1] = [SIGNER] owner
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewEmitCcipMessageSentInstructionBuilder creates a new `EmitCcipMessageSent` instruction builder.
func NewEmitCcipMessageSentInstructionBuilder() *EmitCcipMessageSent {
	nd := &EmitCcipMessageSent{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 2),
	}
	return nd
}

// SetSender sets the "sender" parameter.
func (inst *EmitCcipMessageSent) SetSender(sender ag_solanago.PublicKey) *EmitCcipMessageSent {
	inst.Sender = &sender
	return inst
}

// SetIndex sets the "index" parameter.
func (inst *EmitCcipMessageSent) SetIndex(index uint64) *EmitCcipMessageSent {
	inst.Index = &index
	return inst
}

// SetEntrypointAccount sets the "entrypoint" account.
func (inst *EmitCcipMessageSent) SetEntrypointAccount(entrypoint ag_solanago.PublicKey) *EmitCcipMessageSent {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(entrypoint).WRITE()
	return inst
}

// GetEntrypointAccount gets the "entrypoint" account.
func (inst *EmitCcipMessageSent) GetEntrypointAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetOwnerAccount sets the "owner" account.
func (inst *EmitCcipMessageSent) SetOwnerAccount(owner ag_solanago.PublicKey) *EmitCcipMessageSent {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(owner).SIGNER()
	return inst
}

// GetOwnerAccount gets the "owner" account.
func (inst *EmitCcipMessageSent) GetOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

func (inst EmitCcipMessageSent) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_EmitCcipMessageSent,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst EmitCcipMessageSent) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *EmitCcipMessageSent) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Sender == nil {
			return errors.New("Sender parameter is not set")
		}
		if inst.Index == nil {
			return errors.New("Index parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Entrypoint is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Owner is not set")
		}
	}
	return nil
}

func (inst *EmitCcipMessageSent) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("EmitCcipMessageSent")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Sender", *inst.Sender))
						paramsBranch.Child(ag_format.Param(" Index", *inst.Index))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=2]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("entrypoint", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("     owner", inst.AccountMetaSlice.Get(1)))
					})
				})
		})
}

func (obj EmitCcipMessageSent) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Sender` param:
	err = encoder.Encode(obj.Sender)
	if err != nil {
		return err
	}
	// Serialize `Index` param:
	err = encoder.Encode(obj.Index)
	if err != nil {
		return err
	}
	return nil
}
func (obj *EmitCcipMessageSent) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Sender`:
	err = decoder.Decode(&obj.Sender)
	if err != nil {
		return err
	}
	// Deserialize `Index`:
	err = decoder.Decode(&obj.Index)
	if err != nil {
		return err
	}
	return nil
}

// NewEmitCcipMessageSentInstruction declares a new EmitCcipMessageSent instruction with the provided parameters and accounts.
func NewEmitCcipMessageSentInstruction(
	// Parameters:
	sender ag_solanago.PublicKey,
	index uint64,
	// Accounts:
	entrypoint ag_solanago.PublicKey,
	owner ag_solanago.PublicKey) *EmitCcipMessageSent {
	return NewEmitCcipMessageSentInstructionBuilder().
		SetSender(sender).
		SetIndex(index).
		SetEntrypointAccount(entrypoint).
		SetOwnerAccount(owner)
}
