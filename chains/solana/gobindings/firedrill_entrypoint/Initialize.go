// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package firedrill_entrypoint

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Initialize is the `initialize` instruction.
type Initialize struct {
	ChainSelector *uint64
	OffRamp       *ag_solanago.PublicKey
	FeeQuoter     *ag_solanago.PublicKey
	Receiver      *ag_solanago.PublicKey

	// [0] = [WRITE] entrypoint
	//
	// [1] = [WRITE] config
	//
	// [2] = [WRITE] destChain
	//
	// [3] = [WRITE] token
	// ··········· The PDA where we want a single “firedrill token” mint for this entrypoint
	//
	// [4] = [] tokenProgram
	// ··········· SPL Token program
	//
	// [5] = [] rent
	// ··········· Rent sysvar for SPL init
	//
	// [6] = [WRITE, SIGNER] authority
	//
	// [7] = [] systemProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewInitializeInstructionBuilder creates a new `Initialize` instruction builder.
func NewInitializeInstructionBuilder() *Initialize {
	nd := &Initialize{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 8),
	}
	return nd
}

// SetChainSelector sets the "chainSelector" parameter.
func (inst *Initialize) SetChainSelector(chainSelector uint64) *Initialize {
	inst.ChainSelector = &chainSelector
	return inst
}

// SetOffRamp sets the "offRamp" parameter.
func (inst *Initialize) SetOffRamp(offRamp ag_solanago.PublicKey) *Initialize {
	inst.OffRamp = &offRamp
	return inst
}

// SetFeeQuoter sets the "feeQuoter" parameter.
func (inst *Initialize) SetFeeQuoter(feeQuoter ag_solanago.PublicKey) *Initialize {
	inst.FeeQuoter = &feeQuoter
	return inst
}

// SetReceiver sets the "receiver" parameter.
func (inst *Initialize) SetReceiver(receiver ag_solanago.PublicKey) *Initialize {
	inst.Receiver = &receiver
	return inst
}

// SetEntrypointAccount sets the "entrypoint" account.
func (inst *Initialize) SetEntrypointAccount(entrypoint ag_solanago.PublicKey) *Initialize {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(entrypoint).WRITE()
	return inst
}

// GetEntrypointAccount gets the "entrypoint" account.
func (inst *Initialize) GetEntrypointAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetConfigAccount sets the "config" account.
func (inst *Initialize) SetConfigAccount(config ag_solanago.PublicKey) *Initialize {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(config).WRITE()
	return inst
}

// GetConfigAccount gets the "config" account.
func (inst *Initialize) GetConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetDestChainAccount sets the "destChain" account.
func (inst *Initialize) SetDestChainAccount(destChain ag_solanago.PublicKey) *Initialize {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(destChain).WRITE()
	return inst
}

// GetDestChainAccount gets the "destChain" account.
func (inst *Initialize) GetDestChainAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetTokenAccount sets the "token" account.
// The PDA where we want a single “firedrill token” mint for this entrypoint
func (inst *Initialize) SetTokenAccount(token ag_solanago.PublicKey) *Initialize {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(token).WRITE()
	return inst
}

// GetTokenAccount gets the "token" account.
// The PDA where we want a single “firedrill token” mint for this entrypoint
func (inst *Initialize) GetTokenAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
// SPL Token program
func (inst *Initialize) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *Initialize {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
// SPL Token program
func (inst *Initialize) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetRentAccount sets the "rent" account.
// Rent sysvar for SPL init
func (inst *Initialize) SetRentAccount(rent ag_solanago.PublicKey) *Initialize {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(rent)
	return inst
}

// GetRentAccount gets the "rent" account.
// Rent sysvar for SPL init
func (inst *Initialize) GetRentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetAuthorityAccount sets the "authority" account.
func (inst *Initialize) SetAuthorityAccount(authority ag_solanago.PublicKey) *Initialize {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(authority).WRITE().SIGNER()
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *Initialize) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *Initialize) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *Initialize {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *Initialize) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

func (inst Initialize) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_Initialize,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst Initialize) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *Initialize) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.ChainSelector == nil {
			return errors.New("ChainSelector parameter is not set")
		}
		if inst.OffRamp == nil {
			return errors.New("OffRamp parameter is not set")
		}
		if inst.FeeQuoter == nil {
			return errors.New("FeeQuoter parameter is not set")
		}
		if inst.Receiver == nil {
			return errors.New("Receiver parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Entrypoint is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Config is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.DestChain is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Token is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.Rent is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.Authority is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *Initialize) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("Initialize")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=4]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("ChainSelector", *inst.ChainSelector))
						paramsBranch.Child(ag_format.Param("      OffRamp", *inst.OffRamp))
						paramsBranch.Child(ag_format.Param("    FeeQuoter", *inst.FeeQuoter))
						paramsBranch.Child(ag_format.Param("     Receiver", *inst.Receiver))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=8]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("   entrypoint", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("       config", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("    destChain", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("        token", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta(" tokenProgram", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("         rent", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("    authority", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("systemProgram", inst.AccountMetaSlice.Get(7)))
					})
				})
		})
}

func (obj Initialize) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ChainSelector` param:
	err = encoder.Encode(obj.ChainSelector)
	if err != nil {
		return err
	}
	// Serialize `OffRamp` param:
	err = encoder.Encode(obj.OffRamp)
	if err != nil {
		return err
	}
	// Serialize `FeeQuoter` param:
	err = encoder.Encode(obj.FeeQuoter)
	if err != nil {
		return err
	}
	// Serialize `Receiver` param:
	err = encoder.Encode(obj.Receiver)
	if err != nil {
		return err
	}
	return nil
}
func (obj *Initialize) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ChainSelector`:
	err = decoder.Decode(&obj.ChainSelector)
	if err != nil {
		return err
	}
	// Deserialize `OffRamp`:
	err = decoder.Decode(&obj.OffRamp)
	if err != nil {
		return err
	}
	// Deserialize `FeeQuoter`:
	err = decoder.Decode(&obj.FeeQuoter)
	if err != nil {
		return err
	}
	// Deserialize `Receiver`:
	err = decoder.Decode(&obj.Receiver)
	if err != nil {
		return err
	}
	return nil
}

// NewInitializeInstruction declares a new Initialize instruction with the provided parameters and accounts.
func NewInitializeInstruction(
	// Parameters:
	chainSelector uint64,
	offRamp ag_solanago.PublicKey,
	feeQuoter ag_solanago.PublicKey,
	receiver ag_solanago.PublicKey,
	// Accounts:
	entrypoint ag_solanago.PublicKey,
	config ag_solanago.PublicKey,
	destChain ag_solanago.PublicKey,
	token ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	rent ag_solanago.PublicKey,
	authority ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *Initialize {
	return NewInitializeInstructionBuilder().
		SetChainSelector(chainSelector).
		SetOffRamp(offRamp).
		SetFeeQuoter(feeQuoter).
		SetReceiver(receiver).
		SetEntrypointAccount(entrypoint).
		SetConfigAccount(config).
		SetDestChainAccount(destChain).
		SetTokenAccount(token).
		SetTokenProgramAccount(tokenProgram).
		SetRentAccount(rent).
		SetAuthorityAccount(authority).
		SetSystemProgramAccount(systemProgram)
}
