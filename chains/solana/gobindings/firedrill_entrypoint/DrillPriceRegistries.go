// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package firedrill_entrypoint

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// DrillPriceRegistries is the `drillPriceRegistries` instruction.
type DrillPriceRegistries struct {

	// [0] = [WRITE] entrypoint
	//
	// [1] = [SIGNER] owner
	//
	// [2] = [] onramp
	//
	// [3] = [] offramp
	//
	// [4] = [] compound
	//
	// [5] = [] onrampProgram
	//
	// [6] = [] offrampProgram
	//
	// [7] = [] compoundProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewDrillPriceRegistriesInstructionBuilder creates a new `DrillPriceRegistries` instruction builder.
func NewDrillPriceRegistriesInstructionBuilder() *DrillPriceRegistries {
	nd := &DrillPriceRegistries{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 8),
	}
	return nd
}

// SetEntrypointAccount sets the "entrypoint" account.
func (inst *DrillPriceRegistries) SetEntrypointAccount(entrypoint ag_solanago.PublicKey) *DrillPriceRegistries {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(entrypoint).WRITE()
	return inst
}

// GetEntrypointAccount gets the "entrypoint" account.
func (inst *DrillPriceRegistries) GetEntrypointAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetOwnerAccount sets the "owner" account.
func (inst *DrillPriceRegistries) SetOwnerAccount(owner ag_solanago.PublicKey) *DrillPriceRegistries {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(owner).SIGNER()
	return inst
}

// GetOwnerAccount gets the "owner" account.
func (inst *DrillPriceRegistries) GetOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetOnrampAccount sets the "onramp" account.
func (inst *DrillPriceRegistries) SetOnrampAccount(onramp ag_solanago.PublicKey) *DrillPriceRegistries {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(onramp)
	return inst
}

// GetOnrampAccount gets the "onramp" account.
func (inst *DrillPriceRegistries) GetOnrampAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetOfframpAccount sets the "offramp" account.
func (inst *DrillPriceRegistries) SetOfframpAccount(offramp ag_solanago.PublicKey) *DrillPriceRegistries {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(offramp)
	return inst
}

// GetOfframpAccount gets the "offramp" account.
func (inst *DrillPriceRegistries) GetOfframpAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetCompoundAccount sets the "compound" account.
func (inst *DrillPriceRegistries) SetCompoundAccount(compound ag_solanago.PublicKey) *DrillPriceRegistries {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(compound)
	return inst
}

// GetCompoundAccount gets the "compound" account.
func (inst *DrillPriceRegistries) GetCompoundAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetOnrampProgramAccount sets the "onrampProgram" account.
func (inst *DrillPriceRegistries) SetOnrampProgramAccount(onrampProgram ag_solanago.PublicKey) *DrillPriceRegistries {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(onrampProgram)
	return inst
}

// GetOnrampProgramAccount gets the "onrampProgram" account.
func (inst *DrillPriceRegistries) GetOnrampProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetOfframpProgramAccount sets the "offrampProgram" account.
func (inst *DrillPriceRegistries) SetOfframpProgramAccount(offrampProgram ag_solanago.PublicKey) *DrillPriceRegistries {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(offrampProgram)
	return inst
}

// GetOfframpProgramAccount gets the "offrampProgram" account.
func (inst *DrillPriceRegistries) GetOfframpProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetCompoundProgramAccount sets the "compoundProgram" account.
func (inst *DrillPriceRegistries) SetCompoundProgramAccount(compoundProgram ag_solanago.PublicKey) *DrillPriceRegistries {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(compoundProgram)
	return inst
}

// GetCompoundProgramAccount gets the "compoundProgram" account.
func (inst *DrillPriceRegistries) GetCompoundProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

func (inst DrillPriceRegistries) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_DrillPriceRegistries,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst DrillPriceRegistries) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *DrillPriceRegistries) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Entrypoint is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Owner is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Onramp is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Offramp is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.Compound is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.OnrampProgram is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.OfframpProgram is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.CompoundProgram is not set")
		}
	}
	return nil
}

func (inst *DrillPriceRegistries) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("DrillPriceRegistries")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=8]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("     entrypoint", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("          owner", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("         onramp", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("        offramp", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("       compound", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("  onrampProgram", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta(" offrampProgram", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("compoundProgram", inst.AccountMetaSlice.Get(7)))
					})
				})
		})
}

func (obj DrillPriceRegistries) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *DrillPriceRegistries) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewDrillPriceRegistriesInstruction declares a new DrillPriceRegistries instruction with the provided parameters and accounts.
func NewDrillPriceRegistriesInstruction(
	// Accounts:
	entrypoint ag_solanago.PublicKey,
	owner ag_solanago.PublicKey,
	onramp ag_solanago.PublicKey,
	offramp ag_solanago.PublicKey,
	compound ag_solanago.PublicKey,
	onrampProgram ag_solanago.PublicKey,
	offrampProgram ag_solanago.PublicKey,
	compoundProgram ag_solanago.PublicKey) *DrillPriceRegistries {
	return NewDrillPriceRegistriesInstructionBuilder().
		SetEntrypointAccount(entrypoint).
		SetOwnerAccount(owner).
		SetOnrampAccount(onramp).
		SetOfframpAccount(offramp).
		SetCompoundAccount(compound).
		SetOnrampProgramAccount(onrampProgram).
		SetOfframpProgramAccount(offrampProgram).
		SetCompoundProgramAccount(compoundProgram)
}
