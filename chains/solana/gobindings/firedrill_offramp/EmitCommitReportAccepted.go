// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package firedrill_offramp

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// EmitCommitReportAccepted is the `emitCommitReportAccepted` instruction.
type EmitCommitReportAccepted struct {
	MinSeqNr *uint64
	MaxSeqNr *uint64

	// [0] = [WRITE] offramp
	// ··········· The OffRamp account—for ownership verification.
	//
	// [1] = [SIGNER] owner
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewEmitCommitReportAcceptedInstructionBuilder creates a new `EmitCommitReportAccepted` instruction builder.
func NewEmitCommitReportAcceptedInstructionBuilder() *EmitCommitReportAccepted {
	nd := &EmitCommitReportAccepted{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 2),
	}
	return nd
}

// SetMinSeqNr sets the "minSeqNr" parameter.
func (inst *EmitCommitReportAccepted) SetMinSeqNr(minSeqNr uint64) *EmitCommitReportAccepted {
	inst.MinSeqNr = &minSeqNr
	return inst
}

// SetMaxSeqNr sets the "maxSeqNr" parameter.
func (inst *EmitCommitReportAccepted) SetMaxSeqNr(maxSeqNr uint64) *EmitCommitReportAccepted {
	inst.MaxSeqNr = &maxSeqNr
	return inst
}

// SetOfframpAccount sets the "offramp" account.
// The OffRamp account—for ownership verification.
func (inst *EmitCommitReportAccepted) SetOfframpAccount(offramp ag_solanago.PublicKey) *EmitCommitReportAccepted {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(offramp).WRITE()
	return inst
}

// GetOfframpAccount gets the "offramp" account.
// The OffRamp account—for ownership verification.
func (inst *EmitCommitReportAccepted) GetOfframpAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetOwnerAccount sets the "owner" account.
func (inst *EmitCommitReportAccepted) SetOwnerAccount(owner ag_solanago.PublicKey) *EmitCommitReportAccepted {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(owner).SIGNER()
	return inst
}

// GetOwnerAccount gets the "owner" account.
func (inst *EmitCommitReportAccepted) GetOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

func (inst EmitCommitReportAccepted) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_EmitCommitReportAccepted,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst EmitCommitReportAccepted) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *EmitCommitReportAccepted) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.MinSeqNr == nil {
			return errors.New("MinSeqNr parameter is not set")
		}
		if inst.MaxSeqNr == nil {
			return errors.New("MaxSeqNr parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Offramp is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Owner is not set")
		}
	}
	return nil
}

func (inst *EmitCommitReportAccepted) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("EmitCommitReportAccepted")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("MinSeqNr", *inst.MinSeqNr))
						paramsBranch.Child(ag_format.Param("MaxSeqNr", *inst.MaxSeqNr))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=2]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("offramp", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("  owner", inst.AccountMetaSlice.Get(1)))
					})
				})
		})
}

func (obj EmitCommitReportAccepted) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `MinSeqNr` param:
	err = encoder.Encode(obj.MinSeqNr)
	if err != nil {
		return err
	}
	// Serialize `MaxSeqNr` param:
	err = encoder.Encode(obj.MaxSeqNr)
	if err != nil {
		return err
	}
	return nil
}
func (obj *EmitCommitReportAccepted) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `MinSeqNr`:
	err = decoder.Decode(&obj.MinSeqNr)
	if err != nil {
		return err
	}
	// Deserialize `MaxSeqNr`:
	err = decoder.Decode(&obj.MaxSeqNr)
	if err != nil {
		return err
	}
	return nil
}

// NewEmitCommitReportAcceptedInstruction declares a new EmitCommitReportAccepted instruction with the provided parameters and accounts.
func NewEmitCommitReportAcceptedInstruction(
	// Parameters:
	minSeqNr uint64,
	maxSeqNr uint64,
	// Accounts:
	offramp ag_solanago.PublicKey,
	owner ag_solanago.PublicKey) *EmitCommitReportAccepted {
	return NewEmitCommitReportAcceptedInstructionBuilder().
		SetMinSeqNr(minSeqNr).
		SetMaxSeqNr(maxSeqNr).
		SetOfframpAccount(offramp).
		SetOwnerAccount(owner)
}
